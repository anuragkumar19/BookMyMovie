// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: movies/v1/formats.proto

package moviesv1connect

import (
	v1 "bookmymovie.app/bookmymovie/api/gen/movies/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MoviesFormatsServiceName is the fully-qualified name of the MoviesFormatsService service.
	MoviesFormatsServiceName = "movies.v1.MoviesFormatsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MoviesFormatsServiceGetFormatProcedure is the fully-qualified name of the MoviesFormatsService's
	// GetFormat RPC.
	MoviesFormatsServiceGetFormatProcedure = "/movies.v1.MoviesFormatsService/GetFormat"
	// MoviesFormatsServiceGetFormatsProcedure is the fully-qualified name of the MoviesFormatsService's
	// GetFormats RPC.
	MoviesFormatsServiceGetFormatsProcedure = "/movies.v1.MoviesFormatsService/GetFormats"
	// MoviesFormatsServiceCreateFormatProcedure is the fully-qualified name of the
	// MoviesFormatsService's CreateFormat RPC.
	MoviesFormatsServiceCreateFormatProcedure = "/movies.v1.MoviesFormatsService/CreateFormat"
	// MoviesFormatsServiceUpdateFormatProcedure is the fully-qualified name of the
	// MoviesFormatsService's UpdateFormat RPC.
	MoviesFormatsServiceUpdateFormatProcedure = "/movies.v1.MoviesFormatsService/UpdateFormat"
	// MoviesFormatsServiceDeleteFormatProcedure is the fully-qualified name of the
	// MoviesFormatsService's DeleteFormat RPC.
	MoviesFormatsServiceDeleteFormatProcedure = "/movies.v1.MoviesFormatsService/DeleteFormat"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	moviesFormatsServiceServiceDescriptor            = v1.File_movies_v1_formats_proto.Services().ByName("MoviesFormatsService")
	moviesFormatsServiceGetFormatMethodDescriptor    = moviesFormatsServiceServiceDescriptor.Methods().ByName("GetFormat")
	moviesFormatsServiceGetFormatsMethodDescriptor   = moviesFormatsServiceServiceDescriptor.Methods().ByName("GetFormats")
	moviesFormatsServiceCreateFormatMethodDescriptor = moviesFormatsServiceServiceDescriptor.Methods().ByName("CreateFormat")
	moviesFormatsServiceUpdateFormatMethodDescriptor = moviesFormatsServiceServiceDescriptor.Methods().ByName("UpdateFormat")
	moviesFormatsServiceDeleteFormatMethodDescriptor = moviesFormatsServiceServiceDescriptor.Methods().ByName("DeleteFormat")
)

// MoviesFormatsServiceClient is a client for the movies.v1.MoviesFormatsService service.
type MoviesFormatsServiceClient interface {
	GetFormat(context.Context, *connect.Request[v1.GetFormatRequest]) (*connect.Response[v1.GetFormatResponse], error)
	GetFormats(context.Context, *connect.Request[v1.GetFormatsRequest]) (*connect.Response[v1.GetFormatsResponse], error)
	CreateFormat(context.Context, *connect.Request[v1.CreateFormatRequest]) (*connect.Response[v1.CreateFormatResponse], error)
	UpdateFormat(context.Context, *connect.Request[v1.UpdateFormatRequest]) (*connect.Response[v1.UpdateFormatResponse], error)
	DeleteFormat(context.Context, *connect.Request[v1.DeleteFormatRequest]) (*connect.Response[v1.DeleteFormatResponse], error)
}

// NewMoviesFormatsServiceClient constructs a client for the movies.v1.MoviesFormatsService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMoviesFormatsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MoviesFormatsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &moviesFormatsServiceClient{
		getFormat: connect.NewClient[v1.GetFormatRequest, v1.GetFormatResponse](
			httpClient,
			baseURL+MoviesFormatsServiceGetFormatProcedure,
			connect.WithSchema(moviesFormatsServiceGetFormatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFormats: connect.NewClient[v1.GetFormatsRequest, v1.GetFormatsResponse](
			httpClient,
			baseURL+MoviesFormatsServiceGetFormatsProcedure,
			connect.WithSchema(moviesFormatsServiceGetFormatsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createFormat: connect.NewClient[v1.CreateFormatRequest, v1.CreateFormatResponse](
			httpClient,
			baseURL+MoviesFormatsServiceCreateFormatProcedure,
			connect.WithSchema(moviesFormatsServiceCreateFormatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateFormat: connect.NewClient[v1.UpdateFormatRequest, v1.UpdateFormatResponse](
			httpClient,
			baseURL+MoviesFormatsServiceUpdateFormatProcedure,
			connect.WithSchema(moviesFormatsServiceUpdateFormatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteFormat: connect.NewClient[v1.DeleteFormatRequest, v1.DeleteFormatResponse](
			httpClient,
			baseURL+MoviesFormatsServiceDeleteFormatProcedure,
			connect.WithSchema(moviesFormatsServiceDeleteFormatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// moviesFormatsServiceClient implements MoviesFormatsServiceClient.
type moviesFormatsServiceClient struct {
	getFormat    *connect.Client[v1.GetFormatRequest, v1.GetFormatResponse]
	getFormats   *connect.Client[v1.GetFormatsRequest, v1.GetFormatsResponse]
	createFormat *connect.Client[v1.CreateFormatRequest, v1.CreateFormatResponse]
	updateFormat *connect.Client[v1.UpdateFormatRequest, v1.UpdateFormatResponse]
	deleteFormat *connect.Client[v1.DeleteFormatRequest, v1.DeleteFormatResponse]
}

// GetFormat calls movies.v1.MoviesFormatsService.GetFormat.
func (c *moviesFormatsServiceClient) GetFormat(ctx context.Context, req *connect.Request[v1.GetFormatRequest]) (*connect.Response[v1.GetFormatResponse], error) {
	return c.getFormat.CallUnary(ctx, req)
}

// GetFormats calls movies.v1.MoviesFormatsService.GetFormats.
func (c *moviesFormatsServiceClient) GetFormats(ctx context.Context, req *connect.Request[v1.GetFormatsRequest]) (*connect.Response[v1.GetFormatsResponse], error) {
	return c.getFormats.CallUnary(ctx, req)
}

// CreateFormat calls movies.v1.MoviesFormatsService.CreateFormat.
func (c *moviesFormatsServiceClient) CreateFormat(ctx context.Context, req *connect.Request[v1.CreateFormatRequest]) (*connect.Response[v1.CreateFormatResponse], error) {
	return c.createFormat.CallUnary(ctx, req)
}

// UpdateFormat calls movies.v1.MoviesFormatsService.UpdateFormat.
func (c *moviesFormatsServiceClient) UpdateFormat(ctx context.Context, req *connect.Request[v1.UpdateFormatRequest]) (*connect.Response[v1.UpdateFormatResponse], error) {
	return c.updateFormat.CallUnary(ctx, req)
}

// DeleteFormat calls movies.v1.MoviesFormatsService.DeleteFormat.
func (c *moviesFormatsServiceClient) DeleteFormat(ctx context.Context, req *connect.Request[v1.DeleteFormatRequest]) (*connect.Response[v1.DeleteFormatResponse], error) {
	return c.deleteFormat.CallUnary(ctx, req)
}

// MoviesFormatsServiceHandler is an implementation of the movies.v1.MoviesFormatsService service.
type MoviesFormatsServiceHandler interface {
	GetFormat(context.Context, *connect.Request[v1.GetFormatRequest]) (*connect.Response[v1.GetFormatResponse], error)
	GetFormats(context.Context, *connect.Request[v1.GetFormatsRequest]) (*connect.Response[v1.GetFormatsResponse], error)
	CreateFormat(context.Context, *connect.Request[v1.CreateFormatRequest]) (*connect.Response[v1.CreateFormatResponse], error)
	UpdateFormat(context.Context, *connect.Request[v1.UpdateFormatRequest]) (*connect.Response[v1.UpdateFormatResponse], error)
	DeleteFormat(context.Context, *connect.Request[v1.DeleteFormatRequest]) (*connect.Response[v1.DeleteFormatResponse], error)
}

// NewMoviesFormatsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMoviesFormatsServiceHandler(svc MoviesFormatsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	moviesFormatsServiceGetFormatHandler := connect.NewUnaryHandler(
		MoviesFormatsServiceGetFormatProcedure,
		svc.GetFormat,
		connect.WithSchema(moviesFormatsServiceGetFormatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesFormatsServiceGetFormatsHandler := connect.NewUnaryHandler(
		MoviesFormatsServiceGetFormatsProcedure,
		svc.GetFormats,
		connect.WithSchema(moviesFormatsServiceGetFormatsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesFormatsServiceCreateFormatHandler := connect.NewUnaryHandler(
		MoviesFormatsServiceCreateFormatProcedure,
		svc.CreateFormat,
		connect.WithSchema(moviesFormatsServiceCreateFormatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesFormatsServiceUpdateFormatHandler := connect.NewUnaryHandler(
		MoviesFormatsServiceUpdateFormatProcedure,
		svc.UpdateFormat,
		connect.WithSchema(moviesFormatsServiceUpdateFormatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesFormatsServiceDeleteFormatHandler := connect.NewUnaryHandler(
		MoviesFormatsServiceDeleteFormatProcedure,
		svc.DeleteFormat,
		connect.WithSchema(moviesFormatsServiceDeleteFormatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/movies.v1.MoviesFormatsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MoviesFormatsServiceGetFormatProcedure:
			moviesFormatsServiceGetFormatHandler.ServeHTTP(w, r)
		case MoviesFormatsServiceGetFormatsProcedure:
			moviesFormatsServiceGetFormatsHandler.ServeHTTP(w, r)
		case MoviesFormatsServiceCreateFormatProcedure:
			moviesFormatsServiceCreateFormatHandler.ServeHTTP(w, r)
		case MoviesFormatsServiceUpdateFormatProcedure:
			moviesFormatsServiceUpdateFormatHandler.ServeHTTP(w, r)
		case MoviesFormatsServiceDeleteFormatProcedure:
			moviesFormatsServiceDeleteFormatHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMoviesFormatsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMoviesFormatsServiceHandler struct{}

func (UnimplementedMoviesFormatsServiceHandler) GetFormat(context.Context, *connect.Request[v1.GetFormatRequest]) (*connect.Response[v1.GetFormatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesFormatsService.GetFormat is not implemented"))
}

func (UnimplementedMoviesFormatsServiceHandler) GetFormats(context.Context, *connect.Request[v1.GetFormatsRequest]) (*connect.Response[v1.GetFormatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesFormatsService.GetFormats is not implemented"))
}

func (UnimplementedMoviesFormatsServiceHandler) CreateFormat(context.Context, *connect.Request[v1.CreateFormatRequest]) (*connect.Response[v1.CreateFormatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesFormatsService.CreateFormat is not implemented"))
}

func (UnimplementedMoviesFormatsServiceHandler) UpdateFormat(context.Context, *connect.Request[v1.UpdateFormatRequest]) (*connect.Response[v1.UpdateFormatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesFormatsService.UpdateFormat is not implemented"))
}

func (UnimplementedMoviesFormatsServiceHandler) DeleteFormat(context.Context, *connect.Request[v1.DeleteFormatRequest]) (*connect.Response[v1.DeleteFormatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesFormatsService.DeleteFormat is not implemented"))
}
