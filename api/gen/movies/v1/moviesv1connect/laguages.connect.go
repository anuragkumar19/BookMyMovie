// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: movies/v1/laguages.proto

package moviesv1connect

import (
	v1 "bookmymovie.app/bookmymovie/api/gen/movies/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MoviesLanguagesServiceName is the fully-qualified name of the MoviesLanguagesService service.
	MoviesLanguagesServiceName = "movies.v1.MoviesLanguagesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MoviesLanguagesServiceGetLanguageProcedure is the fully-qualified name of the
	// MoviesLanguagesService's GetLanguage RPC.
	MoviesLanguagesServiceGetLanguageProcedure = "/movies.v1.MoviesLanguagesService/GetLanguage"
	// MoviesLanguagesServiceGetLanguagesProcedure is the fully-qualified name of the
	// MoviesLanguagesService's GetLanguages RPC.
	MoviesLanguagesServiceGetLanguagesProcedure = "/movies.v1.MoviesLanguagesService/GetLanguages"
	// MoviesLanguagesServiceCreateLanguageProcedure is the fully-qualified name of the
	// MoviesLanguagesService's CreateLanguage RPC.
	MoviesLanguagesServiceCreateLanguageProcedure = "/movies.v1.MoviesLanguagesService/CreateLanguage"
	// MoviesLanguagesServiceUpdateLanguageProcedure is the fully-qualified name of the
	// MoviesLanguagesService's UpdateLanguage RPC.
	MoviesLanguagesServiceUpdateLanguageProcedure = "/movies.v1.MoviesLanguagesService/UpdateLanguage"
	// MoviesLanguagesServiceDeleteLanguageProcedure is the fully-qualified name of the
	// MoviesLanguagesService's DeleteLanguage RPC.
	MoviesLanguagesServiceDeleteLanguageProcedure = "/movies.v1.MoviesLanguagesService/DeleteLanguage"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	moviesLanguagesServiceServiceDescriptor              = v1.File_movies_v1_laguages_proto.Services().ByName("MoviesLanguagesService")
	moviesLanguagesServiceGetLanguageMethodDescriptor    = moviesLanguagesServiceServiceDescriptor.Methods().ByName("GetLanguage")
	moviesLanguagesServiceGetLanguagesMethodDescriptor   = moviesLanguagesServiceServiceDescriptor.Methods().ByName("GetLanguages")
	moviesLanguagesServiceCreateLanguageMethodDescriptor = moviesLanguagesServiceServiceDescriptor.Methods().ByName("CreateLanguage")
	moviesLanguagesServiceUpdateLanguageMethodDescriptor = moviesLanguagesServiceServiceDescriptor.Methods().ByName("UpdateLanguage")
	moviesLanguagesServiceDeleteLanguageMethodDescriptor = moviesLanguagesServiceServiceDescriptor.Methods().ByName("DeleteLanguage")
)

// MoviesLanguagesServiceClient is a client for the movies.v1.MoviesLanguagesService service.
type MoviesLanguagesServiceClient interface {
	GetLanguage(context.Context, *connect.Request[v1.GetLanguageRequest]) (*connect.Response[v1.GetLanguageResponse], error)
	GetLanguages(context.Context, *connect.Request[v1.GetLanguagesRequest]) (*connect.Response[v1.GetLanguagesResponse], error)
	CreateLanguage(context.Context, *connect.Request[v1.CreateLanguageRequest]) (*connect.Response[v1.CreateLanguageResponse], error)
	UpdateLanguage(context.Context, *connect.Request[v1.UpdateLanguageRequest]) (*connect.Response[v1.UpdateLanguageResponse], error)
	DeleteLanguage(context.Context, *connect.Request[v1.DeleteLanguageRequest]) (*connect.Response[v1.DeleteLanguageResponse], error)
}

// NewMoviesLanguagesServiceClient constructs a client for the movies.v1.MoviesLanguagesService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMoviesLanguagesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MoviesLanguagesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &moviesLanguagesServiceClient{
		getLanguage: connect.NewClient[v1.GetLanguageRequest, v1.GetLanguageResponse](
			httpClient,
			baseURL+MoviesLanguagesServiceGetLanguageProcedure,
			connect.WithSchema(moviesLanguagesServiceGetLanguageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getLanguages: connect.NewClient[v1.GetLanguagesRequest, v1.GetLanguagesResponse](
			httpClient,
			baseURL+MoviesLanguagesServiceGetLanguagesProcedure,
			connect.WithSchema(moviesLanguagesServiceGetLanguagesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createLanguage: connect.NewClient[v1.CreateLanguageRequest, v1.CreateLanguageResponse](
			httpClient,
			baseURL+MoviesLanguagesServiceCreateLanguageProcedure,
			connect.WithSchema(moviesLanguagesServiceCreateLanguageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateLanguage: connect.NewClient[v1.UpdateLanguageRequest, v1.UpdateLanguageResponse](
			httpClient,
			baseURL+MoviesLanguagesServiceUpdateLanguageProcedure,
			connect.WithSchema(moviesLanguagesServiceUpdateLanguageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteLanguage: connect.NewClient[v1.DeleteLanguageRequest, v1.DeleteLanguageResponse](
			httpClient,
			baseURL+MoviesLanguagesServiceDeleteLanguageProcedure,
			connect.WithSchema(moviesLanguagesServiceDeleteLanguageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// moviesLanguagesServiceClient implements MoviesLanguagesServiceClient.
type moviesLanguagesServiceClient struct {
	getLanguage    *connect.Client[v1.GetLanguageRequest, v1.GetLanguageResponse]
	getLanguages   *connect.Client[v1.GetLanguagesRequest, v1.GetLanguagesResponse]
	createLanguage *connect.Client[v1.CreateLanguageRequest, v1.CreateLanguageResponse]
	updateLanguage *connect.Client[v1.UpdateLanguageRequest, v1.UpdateLanguageResponse]
	deleteLanguage *connect.Client[v1.DeleteLanguageRequest, v1.DeleteLanguageResponse]
}

// GetLanguage calls movies.v1.MoviesLanguagesService.GetLanguage.
func (c *moviesLanguagesServiceClient) GetLanguage(ctx context.Context, req *connect.Request[v1.GetLanguageRequest]) (*connect.Response[v1.GetLanguageResponse], error) {
	return c.getLanguage.CallUnary(ctx, req)
}

// GetLanguages calls movies.v1.MoviesLanguagesService.GetLanguages.
func (c *moviesLanguagesServiceClient) GetLanguages(ctx context.Context, req *connect.Request[v1.GetLanguagesRequest]) (*connect.Response[v1.GetLanguagesResponse], error) {
	return c.getLanguages.CallUnary(ctx, req)
}

// CreateLanguage calls movies.v1.MoviesLanguagesService.CreateLanguage.
func (c *moviesLanguagesServiceClient) CreateLanguage(ctx context.Context, req *connect.Request[v1.CreateLanguageRequest]) (*connect.Response[v1.CreateLanguageResponse], error) {
	return c.createLanguage.CallUnary(ctx, req)
}

// UpdateLanguage calls movies.v1.MoviesLanguagesService.UpdateLanguage.
func (c *moviesLanguagesServiceClient) UpdateLanguage(ctx context.Context, req *connect.Request[v1.UpdateLanguageRequest]) (*connect.Response[v1.UpdateLanguageResponse], error) {
	return c.updateLanguage.CallUnary(ctx, req)
}

// DeleteLanguage calls movies.v1.MoviesLanguagesService.DeleteLanguage.
func (c *moviesLanguagesServiceClient) DeleteLanguage(ctx context.Context, req *connect.Request[v1.DeleteLanguageRequest]) (*connect.Response[v1.DeleteLanguageResponse], error) {
	return c.deleteLanguage.CallUnary(ctx, req)
}

// MoviesLanguagesServiceHandler is an implementation of the movies.v1.MoviesLanguagesService
// service.
type MoviesLanguagesServiceHandler interface {
	GetLanguage(context.Context, *connect.Request[v1.GetLanguageRequest]) (*connect.Response[v1.GetLanguageResponse], error)
	GetLanguages(context.Context, *connect.Request[v1.GetLanguagesRequest]) (*connect.Response[v1.GetLanguagesResponse], error)
	CreateLanguage(context.Context, *connect.Request[v1.CreateLanguageRequest]) (*connect.Response[v1.CreateLanguageResponse], error)
	UpdateLanguage(context.Context, *connect.Request[v1.UpdateLanguageRequest]) (*connect.Response[v1.UpdateLanguageResponse], error)
	DeleteLanguage(context.Context, *connect.Request[v1.DeleteLanguageRequest]) (*connect.Response[v1.DeleteLanguageResponse], error)
}

// NewMoviesLanguagesServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMoviesLanguagesServiceHandler(svc MoviesLanguagesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	moviesLanguagesServiceGetLanguageHandler := connect.NewUnaryHandler(
		MoviesLanguagesServiceGetLanguageProcedure,
		svc.GetLanguage,
		connect.WithSchema(moviesLanguagesServiceGetLanguageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesLanguagesServiceGetLanguagesHandler := connect.NewUnaryHandler(
		MoviesLanguagesServiceGetLanguagesProcedure,
		svc.GetLanguages,
		connect.WithSchema(moviesLanguagesServiceGetLanguagesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesLanguagesServiceCreateLanguageHandler := connect.NewUnaryHandler(
		MoviesLanguagesServiceCreateLanguageProcedure,
		svc.CreateLanguage,
		connect.WithSchema(moviesLanguagesServiceCreateLanguageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesLanguagesServiceUpdateLanguageHandler := connect.NewUnaryHandler(
		MoviesLanguagesServiceUpdateLanguageProcedure,
		svc.UpdateLanguage,
		connect.WithSchema(moviesLanguagesServiceUpdateLanguageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesLanguagesServiceDeleteLanguageHandler := connect.NewUnaryHandler(
		MoviesLanguagesServiceDeleteLanguageProcedure,
		svc.DeleteLanguage,
		connect.WithSchema(moviesLanguagesServiceDeleteLanguageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/movies.v1.MoviesLanguagesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MoviesLanguagesServiceGetLanguageProcedure:
			moviesLanguagesServiceGetLanguageHandler.ServeHTTP(w, r)
		case MoviesLanguagesServiceGetLanguagesProcedure:
			moviesLanguagesServiceGetLanguagesHandler.ServeHTTP(w, r)
		case MoviesLanguagesServiceCreateLanguageProcedure:
			moviesLanguagesServiceCreateLanguageHandler.ServeHTTP(w, r)
		case MoviesLanguagesServiceUpdateLanguageProcedure:
			moviesLanguagesServiceUpdateLanguageHandler.ServeHTTP(w, r)
		case MoviesLanguagesServiceDeleteLanguageProcedure:
			moviesLanguagesServiceDeleteLanguageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMoviesLanguagesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMoviesLanguagesServiceHandler struct{}

func (UnimplementedMoviesLanguagesServiceHandler) GetLanguage(context.Context, *connect.Request[v1.GetLanguageRequest]) (*connect.Response[v1.GetLanguageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesLanguagesService.GetLanguage is not implemented"))
}

func (UnimplementedMoviesLanguagesServiceHandler) GetLanguages(context.Context, *connect.Request[v1.GetLanguagesRequest]) (*connect.Response[v1.GetLanguagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesLanguagesService.GetLanguages is not implemented"))
}

func (UnimplementedMoviesLanguagesServiceHandler) CreateLanguage(context.Context, *connect.Request[v1.CreateLanguageRequest]) (*connect.Response[v1.CreateLanguageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesLanguagesService.CreateLanguage is not implemented"))
}

func (UnimplementedMoviesLanguagesServiceHandler) UpdateLanguage(context.Context, *connect.Request[v1.UpdateLanguageRequest]) (*connect.Response[v1.UpdateLanguageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesLanguagesService.UpdateLanguage is not implemented"))
}

func (UnimplementedMoviesLanguagesServiceHandler) DeleteLanguage(context.Context, *connect.Request[v1.DeleteLanguageRequest]) (*connect.Response[v1.DeleteLanguageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesLanguagesService.DeleteLanguage is not implemented"))
}
