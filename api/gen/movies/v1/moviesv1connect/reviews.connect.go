// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: movies/v1/reviews.proto

package moviesv1connect

import (
	v1 "bookmymovie.app/bookmymovie/api/gen/movies/v1"
	connect "connectrpc.com/connect"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MoviesReviewsServiceName is the fully-qualified name of the MoviesReviewsService service.
	MoviesReviewsServiceName = "movies.v1.MoviesReviewsService"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	moviesReviewsServiceServiceDescriptor = v1.File_movies_v1_reviews_proto.Services().ByName("MoviesReviewsService")
)

// MoviesReviewsServiceClient is a client for the movies.v1.MoviesReviewsService service.
type MoviesReviewsServiceClient interface {
}

// NewMoviesReviewsServiceClient constructs a client for the movies.v1.MoviesReviewsService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMoviesReviewsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MoviesReviewsServiceClient {
	return &moviesReviewsServiceClient{}
}

// moviesReviewsServiceClient implements MoviesReviewsServiceClient.
type moviesReviewsServiceClient struct {
}

// MoviesReviewsServiceHandler is an implementation of the movies.v1.MoviesReviewsService service.
type MoviesReviewsServiceHandler interface {
}

// NewMoviesReviewsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMoviesReviewsServiceHandler(svc MoviesReviewsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/movies.v1.MoviesReviewsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMoviesReviewsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMoviesReviewsServiceHandler struct{}
