// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: movies/v1/movies.proto

package moviesv1connect

import (
	v1 "bookmymovie.app/bookmymovie/api/gen/movies/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MoviesLanguagesServiceName is the fully-qualified name of the MoviesLanguagesService service.
	MoviesLanguagesServiceName = "movies.v1.MoviesLanguagesService"
	// MoviesFormatsServiceName is the fully-qualified name of the MoviesFormatsService service.
	MoviesFormatsServiceName = "movies.v1.MoviesFormatsService"
	// MoviesGenresServiceName is the fully-qualified name of the MoviesGenresService service.
	MoviesGenresServiceName = "movies.v1.MoviesGenresService"
	// MoviesPersonsServiceName is the fully-qualified name of the MoviesPersonsService service.
	MoviesPersonsServiceName = "movies.v1.MoviesPersonsService"
	// MoviesServiceName is the fully-qualified name of the MoviesService service.
	MoviesServiceName = "movies.v1.MoviesService"
	// MoviesVideosServiceName is the fully-qualified name of the MoviesVideosService service.
	MoviesVideosServiceName = "movies.v1.MoviesVideosService"
	// MoviesReviewsServiceName is the fully-qualified name of the MoviesReviewsService service.
	MoviesReviewsServiceName = "movies.v1.MoviesReviewsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MoviesLanguagesServiceGetLanguageProcedure is the fully-qualified name of the
	// MoviesLanguagesService's GetLanguage RPC.
	MoviesLanguagesServiceGetLanguageProcedure = "/movies.v1.MoviesLanguagesService/GetLanguage"
	// MoviesLanguagesServiceGetLanguagesProcedure is the fully-qualified name of the
	// MoviesLanguagesService's GetLanguages RPC.
	MoviesLanguagesServiceGetLanguagesProcedure = "/movies.v1.MoviesLanguagesService/GetLanguages"
	// MoviesLanguagesServiceCreateLanguageProcedure is the fully-qualified name of the
	// MoviesLanguagesService's CreateLanguage RPC.
	MoviesLanguagesServiceCreateLanguageProcedure = "/movies.v1.MoviesLanguagesService/CreateLanguage"
	// MoviesLanguagesServiceUpdateLanguageProcedure is the fully-qualified name of the
	// MoviesLanguagesService's UpdateLanguage RPC.
	MoviesLanguagesServiceUpdateLanguageProcedure = "/movies.v1.MoviesLanguagesService/UpdateLanguage"
	// MoviesLanguagesServiceDeleteLanguageProcedure is the fully-qualified name of the
	// MoviesLanguagesService's DeleteLanguage RPC.
	MoviesLanguagesServiceDeleteLanguageProcedure = "/movies.v1.MoviesLanguagesService/DeleteLanguage"
	// MoviesFormatsServiceGetFormatProcedure is the fully-qualified name of the MoviesFormatsService's
	// GetFormat RPC.
	MoviesFormatsServiceGetFormatProcedure = "/movies.v1.MoviesFormatsService/GetFormat"
	// MoviesFormatsServiceGetFormatsProcedure is the fully-qualified name of the MoviesFormatsService's
	// GetFormats RPC.
	MoviesFormatsServiceGetFormatsProcedure = "/movies.v1.MoviesFormatsService/GetFormats"
	// MoviesFormatsServiceCreateFormatProcedure is the fully-qualified name of the
	// MoviesFormatsService's CreateFormat RPC.
	MoviesFormatsServiceCreateFormatProcedure = "/movies.v1.MoviesFormatsService/CreateFormat"
	// MoviesFormatsServiceUpdateFormatProcedure is the fully-qualified name of the
	// MoviesFormatsService's UpdateFormat RPC.
	MoviesFormatsServiceUpdateFormatProcedure = "/movies.v1.MoviesFormatsService/UpdateFormat"
	// MoviesFormatsServiceDeleteFormatProcedure is the fully-qualified name of the
	// MoviesFormatsService's DeleteFormat RPC.
	MoviesFormatsServiceDeleteFormatProcedure = "/movies.v1.MoviesFormatsService/DeleteFormat"
	// MoviesGenresServiceGetGenreProcedure is the fully-qualified name of the MoviesGenresService's
	// GetGenre RPC.
	MoviesGenresServiceGetGenreProcedure = "/movies.v1.MoviesGenresService/GetGenre"
	// MoviesGenresServiceGetGenresProcedure is the fully-qualified name of the MoviesGenresService's
	// GetGenres RPC.
	MoviesGenresServiceGetGenresProcedure = "/movies.v1.MoviesGenresService/GetGenres"
	// MoviesGenresServiceCreateGenreProcedure is the fully-qualified name of the MoviesGenresService's
	// CreateGenre RPC.
	MoviesGenresServiceCreateGenreProcedure = "/movies.v1.MoviesGenresService/CreateGenre"
	// MoviesGenresServiceUpdateGenreProcedure is the fully-qualified name of the MoviesGenresService's
	// UpdateGenre RPC.
	MoviesGenresServiceUpdateGenreProcedure = "/movies.v1.MoviesGenresService/UpdateGenre"
	// MoviesGenresServiceDeleteGenreProcedure is the fully-qualified name of the MoviesGenresService's
	// DeleteGenre RPC.
	MoviesGenresServiceDeleteGenreProcedure = "/movies.v1.MoviesGenresService/DeleteGenre"
	// MoviesPersonsServiceGetPersonProcedure is the fully-qualified name of the MoviesPersonsService's
	// GetPerson RPC.
	MoviesPersonsServiceGetPersonProcedure = "/movies.v1.MoviesPersonsService/GetPerson"
	// MoviesPersonsServiceCreatePersonProcedure is the fully-qualified name of the
	// MoviesPersonsService's CreatePerson RPC.
	MoviesPersonsServiceCreatePersonProcedure = "/movies.v1.MoviesPersonsService/CreatePerson"
	// MoviesPersonsServiceUpdatePersonProcedure is the fully-qualified name of the
	// MoviesPersonsService's UpdatePerson RPC.
	MoviesPersonsServiceUpdatePersonProcedure = "/movies.v1.MoviesPersonsService/UpdatePerson"
	// MoviesPersonsServiceUpdatePersonAddOccupationProcedure is the fully-qualified name of the
	// MoviesPersonsService's UpdatePersonAddOccupation RPC.
	MoviesPersonsServiceUpdatePersonAddOccupationProcedure = "/movies.v1.MoviesPersonsService/UpdatePersonAddOccupation"
	// MoviesPersonsServiceUpdatePersonRemoveOccupationProcedure is the fully-qualified name of the
	// MoviesPersonsService's UpdatePersonRemoveOccupation RPC.
	MoviesPersonsServiceUpdatePersonRemoveOccupationProcedure = "/movies.v1.MoviesPersonsService/UpdatePersonRemoveOccupation"
	// MoviesPersonsServiceUpdatePersonAddNicknameProcedure is the fully-qualified name of the
	// MoviesPersonsService's UpdatePersonAddNickname RPC.
	MoviesPersonsServiceUpdatePersonAddNicknameProcedure = "/movies.v1.MoviesPersonsService/UpdatePersonAddNickname"
	// MoviesPersonsServiceUpdatePersonRemoveNicknameProcedure is the fully-qualified name of the
	// MoviesPersonsService's UpdatePersonRemoveNickname RPC.
	MoviesPersonsServiceUpdatePersonRemoveNicknameProcedure = "/movies.v1.MoviesPersonsService/UpdatePersonRemoveNickname"
	// MoviesPersonsServiceDeletePersonProcedure is the fully-qualified name of the
	// MoviesPersonsService's DeletePerson RPC.
	MoviesPersonsServiceDeletePersonProcedure = "/movies.v1.MoviesPersonsService/DeletePerson"
	// MoviesPersonsServiceListPersonsProcedure is the fully-qualified name of the
	// MoviesPersonsService's ListPersons RPC.
	MoviesPersonsServiceListPersonsProcedure = "/movies.v1.MoviesPersonsService/ListPersons"
	// MoviesPersonsServiceSearchPersonProcedure is the fully-qualified name of the
	// MoviesPersonsService's SearchPerson RPC.
	MoviesPersonsServiceSearchPersonProcedure = "/movies.v1.MoviesPersonsService/SearchPerson"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	moviesLanguagesServiceServiceDescriptor                          = v1.File_movies_v1_movies_proto.Services().ByName("MoviesLanguagesService")
	moviesLanguagesServiceGetLanguageMethodDescriptor                = moviesLanguagesServiceServiceDescriptor.Methods().ByName("GetLanguage")
	moviesLanguagesServiceGetLanguagesMethodDescriptor               = moviesLanguagesServiceServiceDescriptor.Methods().ByName("GetLanguages")
	moviesLanguagesServiceCreateLanguageMethodDescriptor             = moviesLanguagesServiceServiceDescriptor.Methods().ByName("CreateLanguage")
	moviesLanguagesServiceUpdateLanguageMethodDescriptor             = moviesLanguagesServiceServiceDescriptor.Methods().ByName("UpdateLanguage")
	moviesLanguagesServiceDeleteLanguageMethodDescriptor             = moviesLanguagesServiceServiceDescriptor.Methods().ByName("DeleteLanguage")
	moviesFormatsServiceServiceDescriptor                            = v1.File_movies_v1_movies_proto.Services().ByName("MoviesFormatsService")
	moviesFormatsServiceGetFormatMethodDescriptor                    = moviesFormatsServiceServiceDescriptor.Methods().ByName("GetFormat")
	moviesFormatsServiceGetFormatsMethodDescriptor                   = moviesFormatsServiceServiceDescriptor.Methods().ByName("GetFormats")
	moviesFormatsServiceCreateFormatMethodDescriptor                 = moviesFormatsServiceServiceDescriptor.Methods().ByName("CreateFormat")
	moviesFormatsServiceUpdateFormatMethodDescriptor                 = moviesFormatsServiceServiceDescriptor.Methods().ByName("UpdateFormat")
	moviesFormatsServiceDeleteFormatMethodDescriptor                 = moviesFormatsServiceServiceDescriptor.Methods().ByName("DeleteFormat")
	moviesGenresServiceServiceDescriptor                             = v1.File_movies_v1_movies_proto.Services().ByName("MoviesGenresService")
	moviesGenresServiceGetGenreMethodDescriptor                      = moviesGenresServiceServiceDescriptor.Methods().ByName("GetGenre")
	moviesGenresServiceGetGenresMethodDescriptor                     = moviesGenresServiceServiceDescriptor.Methods().ByName("GetGenres")
	moviesGenresServiceCreateGenreMethodDescriptor                   = moviesGenresServiceServiceDescriptor.Methods().ByName("CreateGenre")
	moviesGenresServiceUpdateGenreMethodDescriptor                   = moviesGenresServiceServiceDescriptor.Methods().ByName("UpdateGenre")
	moviesGenresServiceDeleteGenreMethodDescriptor                   = moviesGenresServiceServiceDescriptor.Methods().ByName("DeleteGenre")
	moviesPersonsServiceServiceDescriptor                            = v1.File_movies_v1_movies_proto.Services().ByName("MoviesPersonsService")
	moviesPersonsServiceGetPersonMethodDescriptor                    = moviesPersonsServiceServiceDescriptor.Methods().ByName("GetPerson")
	moviesPersonsServiceCreatePersonMethodDescriptor                 = moviesPersonsServiceServiceDescriptor.Methods().ByName("CreatePerson")
	moviesPersonsServiceUpdatePersonMethodDescriptor                 = moviesPersonsServiceServiceDescriptor.Methods().ByName("UpdatePerson")
	moviesPersonsServiceUpdatePersonAddOccupationMethodDescriptor    = moviesPersonsServiceServiceDescriptor.Methods().ByName("UpdatePersonAddOccupation")
	moviesPersonsServiceUpdatePersonRemoveOccupationMethodDescriptor = moviesPersonsServiceServiceDescriptor.Methods().ByName("UpdatePersonRemoveOccupation")
	moviesPersonsServiceUpdatePersonAddNicknameMethodDescriptor      = moviesPersonsServiceServiceDescriptor.Methods().ByName("UpdatePersonAddNickname")
	moviesPersonsServiceUpdatePersonRemoveNicknameMethodDescriptor   = moviesPersonsServiceServiceDescriptor.Methods().ByName("UpdatePersonRemoveNickname")
	moviesPersonsServiceDeletePersonMethodDescriptor                 = moviesPersonsServiceServiceDescriptor.Methods().ByName("DeletePerson")
	moviesPersonsServiceListPersonsMethodDescriptor                  = moviesPersonsServiceServiceDescriptor.Methods().ByName("ListPersons")
	moviesPersonsServiceSearchPersonMethodDescriptor                 = moviesPersonsServiceServiceDescriptor.Methods().ByName("SearchPerson")
	moviesServiceServiceDescriptor                                   = v1.File_movies_v1_movies_proto.Services().ByName("MoviesService")
	moviesVideosServiceServiceDescriptor                             = v1.File_movies_v1_movies_proto.Services().ByName("MoviesVideosService")
	moviesReviewsServiceServiceDescriptor                            = v1.File_movies_v1_movies_proto.Services().ByName("MoviesReviewsService")
)

// MoviesLanguagesServiceClient is a client for the movies.v1.MoviesLanguagesService service.
type MoviesLanguagesServiceClient interface {
	GetLanguage(context.Context, *connect.Request[v1.GetLanguageRequest]) (*connect.Response[v1.GetLanguageResponse], error)
	GetLanguages(context.Context, *connect.Request[v1.GetLanguagesRequest]) (*connect.Response[v1.GetLanguagesResponse], error)
	CreateLanguage(context.Context, *connect.Request[v1.CreateLanguageRequest]) (*connect.Response[v1.CreateLanguageResponse], error)
	UpdateLanguage(context.Context, *connect.Request[v1.UpdateLanguageRequest]) (*connect.Response[v1.UpdateLanguageResponse], error)
	DeleteLanguage(context.Context, *connect.Request[v1.DeleteLanguageRequest]) (*connect.Response[v1.DeleteLanguageResponse], error)
}

// NewMoviesLanguagesServiceClient constructs a client for the movies.v1.MoviesLanguagesService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMoviesLanguagesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MoviesLanguagesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &moviesLanguagesServiceClient{
		getLanguage: connect.NewClient[v1.GetLanguageRequest, v1.GetLanguageResponse](
			httpClient,
			baseURL+MoviesLanguagesServiceGetLanguageProcedure,
			connect.WithSchema(moviesLanguagesServiceGetLanguageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getLanguages: connect.NewClient[v1.GetLanguagesRequest, v1.GetLanguagesResponse](
			httpClient,
			baseURL+MoviesLanguagesServiceGetLanguagesProcedure,
			connect.WithSchema(moviesLanguagesServiceGetLanguagesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createLanguage: connect.NewClient[v1.CreateLanguageRequest, v1.CreateLanguageResponse](
			httpClient,
			baseURL+MoviesLanguagesServiceCreateLanguageProcedure,
			connect.WithSchema(moviesLanguagesServiceCreateLanguageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateLanguage: connect.NewClient[v1.UpdateLanguageRequest, v1.UpdateLanguageResponse](
			httpClient,
			baseURL+MoviesLanguagesServiceUpdateLanguageProcedure,
			connect.WithSchema(moviesLanguagesServiceUpdateLanguageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteLanguage: connect.NewClient[v1.DeleteLanguageRequest, v1.DeleteLanguageResponse](
			httpClient,
			baseURL+MoviesLanguagesServiceDeleteLanguageProcedure,
			connect.WithSchema(moviesLanguagesServiceDeleteLanguageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// moviesLanguagesServiceClient implements MoviesLanguagesServiceClient.
type moviesLanguagesServiceClient struct {
	getLanguage    *connect.Client[v1.GetLanguageRequest, v1.GetLanguageResponse]
	getLanguages   *connect.Client[v1.GetLanguagesRequest, v1.GetLanguagesResponse]
	createLanguage *connect.Client[v1.CreateLanguageRequest, v1.CreateLanguageResponse]
	updateLanguage *connect.Client[v1.UpdateLanguageRequest, v1.UpdateLanguageResponse]
	deleteLanguage *connect.Client[v1.DeleteLanguageRequest, v1.DeleteLanguageResponse]
}

// GetLanguage calls movies.v1.MoviesLanguagesService.GetLanguage.
func (c *moviesLanguagesServiceClient) GetLanguage(ctx context.Context, req *connect.Request[v1.GetLanguageRequest]) (*connect.Response[v1.GetLanguageResponse], error) {
	return c.getLanguage.CallUnary(ctx, req)
}

// GetLanguages calls movies.v1.MoviesLanguagesService.GetLanguages.
func (c *moviesLanguagesServiceClient) GetLanguages(ctx context.Context, req *connect.Request[v1.GetLanguagesRequest]) (*connect.Response[v1.GetLanguagesResponse], error) {
	return c.getLanguages.CallUnary(ctx, req)
}

// CreateLanguage calls movies.v1.MoviesLanguagesService.CreateLanguage.
func (c *moviesLanguagesServiceClient) CreateLanguage(ctx context.Context, req *connect.Request[v1.CreateLanguageRequest]) (*connect.Response[v1.CreateLanguageResponse], error) {
	return c.createLanguage.CallUnary(ctx, req)
}

// UpdateLanguage calls movies.v1.MoviesLanguagesService.UpdateLanguage.
func (c *moviesLanguagesServiceClient) UpdateLanguage(ctx context.Context, req *connect.Request[v1.UpdateLanguageRequest]) (*connect.Response[v1.UpdateLanguageResponse], error) {
	return c.updateLanguage.CallUnary(ctx, req)
}

// DeleteLanguage calls movies.v1.MoviesLanguagesService.DeleteLanguage.
func (c *moviesLanguagesServiceClient) DeleteLanguage(ctx context.Context, req *connect.Request[v1.DeleteLanguageRequest]) (*connect.Response[v1.DeleteLanguageResponse], error) {
	return c.deleteLanguage.CallUnary(ctx, req)
}

// MoviesLanguagesServiceHandler is an implementation of the movies.v1.MoviesLanguagesService
// service.
type MoviesLanguagesServiceHandler interface {
	GetLanguage(context.Context, *connect.Request[v1.GetLanguageRequest]) (*connect.Response[v1.GetLanguageResponse], error)
	GetLanguages(context.Context, *connect.Request[v1.GetLanguagesRequest]) (*connect.Response[v1.GetLanguagesResponse], error)
	CreateLanguage(context.Context, *connect.Request[v1.CreateLanguageRequest]) (*connect.Response[v1.CreateLanguageResponse], error)
	UpdateLanguage(context.Context, *connect.Request[v1.UpdateLanguageRequest]) (*connect.Response[v1.UpdateLanguageResponse], error)
	DeleteLanguage(context.Context, *connect.Request[v1.DeleteLanguageRequest]) (*connect.Response[v1.DeleteLanguageResponse], error)
}

// NewMoviesLanguagesServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMoviesLanguagesServiceHandler(svc MoviesLanguagesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	moviesLanguagesServiceGetLanguageHandler := connect.NewUnaryHandler(
		MoviesLanguagesServiceGetLanguageProcedure,
		svc.GetLanguage,
		connect.WithSchema(moviesLanguagesServiceGetLanguageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesLanguagesServiceGetLanguagesHandler := connect.NewUnaryHandler(
		MoviesLanguagesServiceGetLanguagesProcedure,
		svc.GetLanguages,
		connect.WithSchema(moviesLanguagesServiceGetLanguagesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesLanguagesServiceCreateLanguageHandler := connect.NewUnaryHandler(
		MoviesLanguagesServiceCreateLanguageProcedure,
		svc.CreateLanguage,
		connect.WithSchema(moviesLanguagesServiceCreateLanguageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesLanguagesServiceUpdateLanguageHandler := connect.NewUnaryHandler(
		MoviesLanguagesServiceUpdateLanguageProcedure,
		svc.UpdateLanguage,
		connect.WithSchema(moviesLanguagesServiceUpdateLanguageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesLanguagesServiceDeleteLanguageHandler := connect.NewUnaryHandler(
		MoviesLanguagesServiceDeleteLanguageProcedure,
		svc.DeleteLanguage,
		connect.WithSchema(moviesLanguagesServiceDeleteLanguageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/movies.v1.MoviesLanguagesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MoviesLanguagesServiceGetLanguageProcedure:
			moviesLanguagesServiceGetLanguageHandler.ServeHTTP(w, r)
		case MoviesLanguagesServiceGetLanguagesProcedure:
			moviesLanguagesServiceGetLanguagesHandler.ServeHTTP(w, r)
		case MoviesLanguagesServiceCreateLanguageProcedure:
			moviesLanguagesServiceCreateLanguageHandler.ServeHTTP(w, r)
		case MoviesLanguagesServiceUpdateLanguageProcedure:
			moviesLanguagesServiceUpdateLanguageHandler.ServeHTTP(w, r)
		case MoviesLanguagesServiceDeleteLanguageProcedure:
			moviesLanguagesServiceDeleteLanguageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMoviesLanguagesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMoviesLanguagesServiceHandler struct{}

func (UnimplementedMoviesLanguagesServiceHandler) GetLanguage(context.Context, *connect.Request[v1.GetLanguageRequest]) (*connect.Response[v1.GetLanguageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesLanguagesService.GetLanguage is not implemented"))
}

func (UnimplementedMoviesLanguagesServiceHandler) GetLanguages(context.Context, *connect.Request[v1.GetLanguagesRequest]) (*connect.Response[v1.GetLanguagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesLanguagesService.GetLanguages is not implemented"))
}

func (UnimplementedMoviesLanguagesServiceHandler) CreateLanguage(context.Context, *connect.Request[v1.CreateLanguageRequest]) (*connect.Response[v1.CreateLanguageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesLanguagesService.CreateLanguage is not implemented"))
}

func (UnimplementedMoviesLanguagesServiceHandler) UpdateLanguage(context.Context, *connect.Request[v1.UpdateLanguageRequest]) (*connect.Response[v1.UpdateLanguageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesLanguagesService.UpdateLanguage is not implemented"))
}

func (UnimplementedMoviesLanguagesServiceHandler) DeleteLanguage(context.Context, *connect.Request[v1.DeleteLanguageRequest]) (*connect.Response[v1.DeleteLanguageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesLanguagesService.DeleteLanguage is not implemented"))
}

// MoviesFormatsServiceClient is a client for the movies.v1.MoviesFormatsService service.
type MoviesFormatsServiceClient interface {
	GetFormat(context.Context, *connect.Request[v1.GetFormatRequest]) (*connect.Response[v1.GetFormatResponse], error)
	GetFormats(context.Context, *connect.Request[v1.GetFormatsRequest]) (*connect.Response[v1.GetFormatsResponse], error)
	CreateFormat(context.Context, *connect.Request[v1.CreateFormatRequest]) (*connect.Response[v1.CreateFormatResponse], error)
	UpdateFormat(context.Context, *connect.Request[v1.UpdateFormatRequest]) (*connect.Response[v1.UpdateFormatResponse], error)
	DeleteFormat(context.Context, *connect.Request[v1.DeleteFormatRequest]) (*connect.Response[v1.DeleteFormatResponse], error)
}

// NewMoviesFormatsServiceClient constructs a client for the movies.v1.MoviesFormatsService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMoviesFormatsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MoviesFormatsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &moviesFormatsServiceClient{
		getFormat: connect.NewClient[v1.GetFormatRequest, v1.GetFormatResponse](
			httpClient,
			baseURL+MoviesFormatsServiceGetFormatProcedure,
			connect.WithSchema(moviesFormatsServiceGetFormatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFormats: connect.NewClient[v1.GetFormatsRequest, v1.GetFormatsResponse](
			httpClient,
			baseURL+MoviesFormatsServiceGetFormatsProcedure,
			connect.WithSchema(moviesFormatsServiceGetFormatsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createFormat: connect.NewClient[v1.CreateFormatRequest, v1.CreateFormatResponse](
			httpClient,
			baseURL+MoviesFormatsServiceCreateFormatProcedure,
			connect.WithSchema(moviesFormatsServiceCreateFormatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateFormat: connect.NewClient[v1.UpdateFormatRequest, v1.UpdateFormatResponse](
			httpClient,
			baseURL+MoviesFormatsServiceUpdateFormatProcedure,
			connect.WithSchema(moviesFormatsServiceUpdateFormatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteFormat: connect.NewClient[v1.DeleteFormatRequest, v1.DeleteFormatResponse](
			httpClient,
			baseURL+MoviesFormatsServiceDeleteFormatProcedure,
			connect.WithSchema(moviesFormatsServiceDeleteFormatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// moviesFormatsServiceClient implements MoviesFormatsServiceClient.
type moviesFormatsServiceClient struct {
	getFormat    *connect.Client[v1.GetFormatRequest, v1.GetFormatResponse]
	getFormats   *connect.Client[v1.GetFormatsRequest, v1.GetFormatsResponse]
	createFormat *connect.Client[v1.CreateFormatRequest, v1.CreateFormatResponse]
	updateFormat *connect.Client[v1.UpdateFormatRequest, v1.UpdateFormatResponse]
	deleteFormat *connect.Client[v1.DeleteFormatRequest, v1.DeleteFormatResponse]
}

// GetFormat calls movies.v1.MoviesFormatsService.GetFormat.
func (c *moviesFormatsServiceClient) GetFormat(ctx context.Context, req *connect.Request[v1.GetFormatRequest]) (*connect.Response[v1.GetFormatResponse], error) {
	return c.getFormat.CallUnary(ctx, req)
}

// GetFormats calls movies.v1.MoviesFormatsService.GetFormats.
func (c *moviesFormatsServiceClient) GetFormats(ctx context.Context, req *connect.Request[v1.GetFormatsRequest]) (*connect.Response[v1.GetFormatsResponse], error) {
	return c.getFormats.CallUnary(ctx, req)
}

// CreateFormat calls movies.v1.MoviesFormatsService.CreateFormat.
func (c *moviesFormatsServiceClient) CreateFormat(ctx context.Context, req *connect.Request[v1.CreateFormatRequest]) (*connect.Response[v1.CreateFormatResponse], error) {
	return c.createFormat.CallUnary(ctx, req)
}

// UpdateFormat calls movies.v1.MoviesFormatsService.UpdateFormat.
func (c *moviesFormatsServiceClient) UpdateFormat(ctx context.Context, req *connect.Request[v1.UpdateFormatRequest]) (*connect.Response[v1.UpdateFormatResponse], error) {
	return c.updateFormat.CallUnary(ctx, req)
}

// DeleteFormat calls movies.v1.MoviesFormatsService.DeleteFormat.
func (c *moviesFormatsServiceClient) DeleteFormat(ctx context.Context, req *connect.Request[v1.DeleteFormatRequest]) (*connect.Response[v1.DeleteFormatResponse], error) {
	return c.deleteFormat.CallUnary(ctx, req)
}

// MoviesFormatsServiceHandler is an implementation of the movies.v1.MoviesFormatsService service.
type MoviesFormatsServiceHandler interface {
	GetFormat(context.Context, *connect.Request[v1.GetFormatRequest]) (*connect.Response[v1.GetFormatResponse], error)
	GetFormats(context.Context, *connect.Request[v1.GetFormatsRequest]) (*connect.Response[v1.GetFormatsResponse], error)
	CreateFormat(context.Context, *connect.Request[v1.CreateFormatRequest]) (*connect.Response[v1.CreateFormatResponse], error)
	UpdateFormat(context.Context, *connect.Request[v1.UpdateFormatRequest]) (*connect.Response[v1.UpdateFormatResponse], error)
	DeleteFormat(context.Context, *connect.Request[v1.DeleteFormatRequest]) (*connect.Response[v1.DeleteFormatResponse], error)
}

// NewMoviesFormatsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMoviesFormatsServiceHandler(svc MoviesFormatsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	moviesFormatsServiceGetFormatHandler := connect.NewUnaryHandler(
		MoviesFormatsServiceGetFormatProcedure,
		svc.GetFormat,
		connect.WithSchema(moviesFormatsServiceGetFormatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesFormatsServiceGetFormatsHandler := connect.NewUnaryHandler(
		MoviesFormatsServiceGetFormatsProcedure,
		svc.GetFormats,
		connect.WithSchema(moviesFormatsServiceGetFormatsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesFormatsServiceCreateFormatHandler := connect.NewUnaryHandler(
		MoviesFormatsServiceCreateFormatProcedure,
		svc.CreateFormat,
		connect.WithSchema(moviesFormatsServiceCreateFormatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesFormatsServiceUpdateFormatHandler := connect.NewUnaryHandler(
		MoviesFormatsServiceUpdateFormatProcedure,
		svc.UpdateFormat,
		connect.WithSchema(moviesFormatsServiceUpdateFormatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesFormatsServiceDeleteFormatHandler := connect.NewUnaryHandler(
		MoviesFormatsServiceDeleteFormatProcedure,
		svc.DeleteFormat,
		connect.WithSchema(moviesFormatsServiceDeleteFormatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/movies.v1.MoviesFormatsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MoviesFormatsServiceGetFormatProcedure:
			moviesFormatsServiceGetFormatHandler.ServeHTTP(w, r)
		case MoviesFormatsServiceGetFormatsProcedure:
			moviesFormatsServiceGetFormatsHandler.ServeHTTP(w, r)
		case MoviesFormatsServiceCreateFormatProcedure:
			moviesFormatsServiceCreateFormatHandler.ServeHTTP(w, r)
		case MoviesFormatsServiceUpdateFormatProcedure:
			moviesFormatsServiceUpdateFormatHandler.ServeHTTP(w, r)
		case MoviesFormatsServiceDeleteFormatProcedure:
			moviesFormatsServiceDeleteFormatHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMoviesFormatsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMoviesFormatsServiceHandler struct{}

func (UnimplementedMoviesFormatsServiceHandler) GetFormat(context.Context, *connect.Request[v1.GetFormatRequest]) (*connect.Response[v1.GetFormatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesFormatsService.GetFormat is not implemented"))
}

func (UnimplementedMoviesFormatsServiceHandler) GetFormats(context.Context, *connect.Request[v1.GetFormatsRequest]) (*connect.Response[v1.GetFormatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesFormatsService.GetFormats is not implemented"))
}

func (UnimplementedMoviesFormatsServiceHandler) CreateFormat(context.Context, *connect.Request[v1.CreateFormatRequest]) (*connect.Response[v1.CreateFormatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesFormatsService.CreateFormat is not implemented"))
}

func (UnimplementedMoviesFormatsServiceHandler) UpdateFormat(context.Context, *connect.Request[v1.UpdateFormatRequest]) (*connect.Response[v1.UpdateFormatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesFormatsService.UpdateFormat is not implemented"))
}

func (UnimplementedMoviesFormatsServiceHandler) DeleteFormat(context.Context, *connect.Request[v1.DeleteFormatRequest]) (*connect.Response[v1.DeleteFormatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesFormatsService.DeleteFormat is not implemented"))
}

// MoviesGenresServiceClient is a client for the movies.v1.MoviesGenresService service.
type MoviesGenresServiceClient interface {
	GetGenre(context.Context, *connect.Request[v1.GetGenreRequest]) (*connect.Response[v1.GetGenreResponse], error)
	GetGenres(context.Context, *connect.Request[v1.GetGenresRequest]) (*connect.Response[v1.GetGenresResponse], error)
	CreateGenre(context.Context, *connect.Request[v1.CreateGenreRequest]) (*connect.Response[v1.CreateGenreResponse], error)
	UpdateGenre(context.Context, *connect.Request[v1.UpdateGenreRequest]) (*connect.Response[v1.UpdateGenreResponse], error)
	DeleteGenre(context.Context, *connect.Request[v1.DeleteGenreRequest]) (*connect.Response[v1.DeleteGenreResponse], error)
}

// NewMoviesGenresServiceClient constructs a client for the movies.v1.MoviesGenresService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMoviesGenresServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MoviesGenresServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &moviesGenresServiceClient{
		getGenre: connect.NewClient[v1.GetGenreRequest, v1.GetGenreResponse](
			httpClient,
			baseURL+MoviesGenresServiceGetGenreProcedure,
			connect.WithSchema(moviesGenresServiceGetGenreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getGenres: connect.NewClient[v1.GetGenresRequest, v1.GetGenresResponse](
			httpClient,
			baseURL+MoviesGenresServiceGetGenresProcedure,
			connect.WithSchema(moviesGenresServiceGetGenresMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createGenre: connect.NewClient[v1.CreateGenreRequest, v1.CreateGenreResponse](
			httpClient,
			baseURL+MoviesGenresServiceCreateGenreProcedure,
			connect.WithSchema(moviesGenresServiceCreateGenreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateGenre: connect.NewClient[v1.UpdateGenreRequest, v1.UpdateGenreResponse](
			httpClient,
			baseURL+MoviesGenresServiceUpdateGenreProcedure,
			connect.WithSchema(moviesGenresServiceUpdateGenreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteGenre: connect.NewClient[v1.DeleteGenreRequest, v1.DeleteGenreResponse](
			httpClient,
			baseURL+MoviesGenresServiceDeleteGenreProcedure,
			connect.WithSchema(moviesGenresServiceDeleteGenreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// moviesGenresServiceClient implements MoviesGenresServiceClient.
type moviesGenresServiceClient struct {
	getGenre    *connect.Client[v1.GetGenreRequest, v1.GetGenreResponse]
	getGenres   *connect.Client[v1.GetGenresRequest, v1.GetGenresResponse]
	createGenre *connect.Client[v1.CreateGenreRequest, v1.CreateGenreResponse]
	updateGenre *connect.Client[v1.UpdateGenreRequest, v1.UpdateGenreResponse]
	deleteGenre *connect.Client[v1.DeleteGenreRequest, v1.DeleteGenreResponse]
}

// GetGenre calls movies.v1.MoviesGenresService.GetGenre.
func (c *moviesGenresServiceClient) GetGenre(ctx context.Context, req *connect.Request[v1.GetGenreRequest]) (*connect.Response[v1.GetGenreResponse], error) {
	return c.getGenre.CallUnary(ctx, req)
}

// GetGenres calls movies.v1.MoviesGenresService.GetGenres.
func (c *moviesGenresServiceClient) GetGenres(ctx context.Context, req *connect.Request[v1.GetGenresRequest]) (*connect.Response[v1.GetGenresResponse], error) {
	return c.getGenres.CallUnary(ctx, req)
}

// CreateGenre calls movies.v1.MoviesGenresService.CreateGenre.
func (c *moviesGenresServiceClient) CreateGenre(ctx context.Context, req *connect.Request[v1.CreateGenreRequest]) (*connect.Response[v1.CreateGenreResponse], error) {
	return c.createGenre.CallUnary(ctx, req)
}

// UpdateGenre calls movies.v1.MoviesGenresService.UpdateGenre.
func (c *moviesGenresServiceClient) UpdateGenre(ctx context.Context, req *connect.Request[v1.UpdateGenreRequest]) (*connect.Response[v1.UpdateGenreResponse], error) {
	return c.updateGenre.CallUnary(ctx, req)
}

// DeleteGenre calls movies.v1.MoviesGenresService.DeleteGenre.
func (c *moviesGenresServiceClient) DeleteGenre(ctx context.Context, req *connect.Request[v1.DeleteGenreRequest]) (*connect.Response[v1.DeleteGenreResponse], error) {
	return c.deleteGenre.CallUnary(ctx, req)
}

// MoviesGenresServiceHandler is an implementation of the movies.v1.MoviesGenresService service.
type MoviesGenresServiceHandler interface {
	GetGenre(context.Context, *connect.Request[v1.GetGenreRequest]) (*connect.Response[v1.GetGenreResponse], error)
	GetGenres(context.Context, *connect.Request[v1.GetGenresRequest]) (*connect.Response[v1.GetGenresResponse], error)
	CreateGenre(context.Context, *connect.Request[v1.CreateGenreRequest]) (*connect.Response[v1.CreateGenreResponse], error)
	UpdateGenre(context.Context, *connect.Request[v1.UpdateGenreRequest]) (*connect.Response[v1.UpdateGenreResponse], error)
	DeleteGenre(context.Context, *connect.Request[v1.DeleteGenreRequest]) (*connect.Response[v1.DeleteGenreResponse], error)
}

// NewMoviesGenresServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMoviesGenresServiceHandler(svc MoviesGenresServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	moviesGenresServiceGetGenreHandler := connect.NewUnaryHandler(
		MoviesGenresServiceGetGenreProcedure,
		svc.GetGenre,
		connect.WithSchema(moviesGenresServiceGetGenreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesGenresServiceGetGenresHandler := connect.NewUnaryHandler(
		MoviesGenresServiceGetGenresProcedure,
		svc.GetGenres,
		connect.WithSchema(moviesGenresServiceGetGenresMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesGenresServiceCreateGenreHandler := connect.NewUnaryHandler(
		MoviesGenresServiceCreateGenreProcedure,
		svc.CreateGenre,
		connect.WithSchema(moviesGenresServiceCreateGenreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesGenresServiceUpdateGenreHandler := connect.NewUnaryHandler(
		MoviesGenresServiceUpdateGenreProcedure,
		svc.UpdateGenre,
		connect.WithSchema(moviesGenresServiceUpdateGenreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesGenresServiceDeleteGenreHandler := connect.NewUnaryHandler(
		MoviesGenresServiceDeleteGenreProcedure,
		svc.DeleteGenre,
		connect.WithSchema(moviesGenresServiceDeleteGenreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/movies.v1.MoviesGenresService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MoviesGenresServiceGetGenreProcedure:
			moviesGenresServiceGetGenreHandler.ServeHTTP(w, r)
		case MoviesGenresServiceGetGenresProcedure:
			moviesGenresServiceGetGenresHandler.ServeHTTP(w, r)
		case MoviesGenresServiceCreateGenreProcedure:
			moviesGenresServiceCreateGenreHandler.ServeHTTP(w, r)
		case MoviesGenresServiceUpdateGenreProcedure:
			moviesGenresServiceUpdateGenreHandler.ServeHTTP(w, r)
		case MoviesGenresServiceDeleteGenreProcedure:
			moviesGenresServiceDeleteGenreHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMoviesGenresServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMoviesGenresServiceHandler struct{}

func (UnimplementedMoviesGenresServiceHandler) GetGenre(context.Context, *connect.Request[v1.GetGenreRequest]) (*connect.Response[v1.GetGenreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesGenresService.GetGenre is not implemented"))
}

func (UnimplementedMoviesGenresServiceHandler) GetGenres(context.Context, *connect.Request[v1.GetGenresRequest]) (*connect.Response[v1.GetGenresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesGenresService.GetGenres is not implemented"))
}

func (UnimplementedMoviesGenresServiceHandler) CreateGenre(context.Context, *connect.Request[v1.CreateGenreRequest]) (*connect.Response[v1.CreateGenreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesGenresService.CreateGenre is not implemented"))
}

func (UnimplementedMoviesGenresServiceHandler) UpdateGenre(context.Context, *connect.Request[v1.UpdateGenreRequest]) (*connect.Response[v1.UpdateGenreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesGenresService.UpdateGenre is not implemented"))
}

func (UnimplementedMoviesGenresServiceHandler) DeleteGenre(context.Context, *connect.Request[v1.DeleteGenreRequest]) (*connect.Response[v1.DeleteGenreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesGenresService.DeleteGenre is not implemented"))
}

// MoviesPersonsServiceClient is a client for the movies.v1.MoviesPersonsService service.
type MoviesPersonsServiceClient interface {
	GetPerson(context.Context, *connect.Request[v1.GetPersonRequest]) (*connect.Response[v1.GetPersonResponse], error)
	CreatePerson(context.Context, *connect.Request[v1.CreatePersonRequest]) (*connect.Response[v1.CreatePersonResponse], error)
	UpdatePerson(context.Context, *connect.Request[v1.UpdatePersonRequest]) (*connect.Response[v1.UpdatePersonResponse], error)
	UpdatePersonAddOccupation(context.Context, *connect.Request[v1.UpdatePersonAddOccupationRequest]) (*connect.Response[v1.UpdatePersonAddOccupationResponse], error)
	UpdatePersonRemoveOccupation(context.Context, *connect.Request[v1.UpdatePersonRemoveOccupationRequest]) (*connect.Response[v1.UpdatePersonRemoveOccupationResponse], error)
	UpdatePersonAddNickname(context.Context, *connect.Request[v1.UpdatePersonAddNicknameRequest]) (*connect.Response[v1.UpdatePersonAddNicknameResponse], error)
	UpdatePersonRemoveNickname(context.Context, *connect.Request[v1.UpdatePersonRemoveNicknameRequest]) (*connect.Response[v1.UpdatePersonRemoveNicknameResponse], error)
	DeletePerson(context.Context, *connect.Request[v1.DeletePersonRequest]) (*connect.Response[v1.DeletePersonResponse], error)
	ListPersons(context.Context, *connect.Request[v1.ListPersonsRequest]) (*connect.Response[v1.ListPersonsResponse], error)
	SearchPerson(context.Context, *connect.Request[v1.SearchPersonRequest]) (*connect.Response[v1.SearchPersonResponse], error)
}

// NewMoviesPersonsServiceClient constructs a client for the movies.v1.MoviesPersonsService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMoviesPersonsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MoviesPersonsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &moviesPersonsServiceClient{
		getPerson: connect.NewClient[v1.GetPersonRequest, v1.GetPersonResponse](
			httpClient,
			baseURL+MoviesPersonsServiceGetPersonProcedure,
			connect.WithSchema(moviesPersonsServiceGetPersonMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createPerson: connect.NewClient[v1.CreatePersonRequest, v1.CreatePersonResponse](
			httpClient,
			baseURL+MoviesPersonsServiceCreatePersonProcedure,
			connect.WithSchema(moviesPersonsServiceCreatePersonMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updatePerson: connect.NewClient[v1.UpdatePersonRequest, v1.UpdatePersonResponse](
			httpClient,
			baseURL+MoviesPersonsServiceUpdatePersonProcedure,
			connect.WithSchema(moviesPersonsServiceUpdatePersonMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updatePersonAddOccupation: connect.NewClient[v1.UpdatePersonAddOccupationRequest, v1.UpdatePersonAddOccupationResponse](
			httpClient,
			baseURL+MoviesPersonsServiceUpdatePersonAddOccupationProcedure,
			connect.WithSchema(moviesPersonsServiceUpdatePersonAddOccupationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updatePersonRemoveOccupation: connect.NewClient[v1.UpdatePersonRemoveOccupationRequest, v1.UpdatePersonRemoveOccupationResponse](
			httpClient,
			baseURL+MoviesPersonsServiceUpdatePersonRemoveOccupationProcedure,
			connect.WithSchema(moviesPersonsServiceUpdatePersonRemoveOccupationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updatePersonAddNickname: connect.NewClient[v1.UpdatePersonAddNicknameRequest, v1.UpdatePersonAddNicknameResponse](
			httpClient,
			baseURL+MoviesPersonsServiceUpdatePersonAddNicknameProcedure,
			connect.WithSchema(moviesPersonsServiceUpdatePersonAddNicknameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updatePersonRemoveNickname: connect.NewClient[v1.UpdatePersonRemoveNicknameRequest, v1.UpdatePersonRemoveNicknameResponse](
			httpClient,
			baseURL+MoviesPersonsServiceUpdatePersonRemoveNicknameProcedure,
			connect.WithSchema(moviesPersonsServiceUpdatePersonRemoveNicknameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deletePerson: connect.NewClient[v1.DeletePersonRequest, v1.DeletePersonResponse](
			httpClient,
			baseURL+MoviesPersonsServiceDeletePersonProcedure,
			connect.WithSchema(moviesPersonsServiceDeletePersonMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listPersons: connect.NewClient[v1.ListPersonsRequest, v1.ListPersonsResponse](
			httpClient,
			baseURL+MoviesPersonsServiceListPersonsProcedure,
			connect.WithSchema(moviesPersonsServiceListPersonsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchPerson: connect.NewClient[v1.SearchPersonRequest, v1.SearchPersonResponse](
			httpClient,
			baseURL+MoviesPersonsServiceSearchPersonProcedure,
			connect.WithSchema(moviesPersonsServiceSearchPersonMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// moviesPersonsServiceClient implements MoviesPersonsServiceClient.
type moviesPersonsServiceClient struct {
	getPerson                    *connect.Client[v1.GetPersonRequest, v1.GetPersonResponse]
	createPerson                 *connect.Client[v1.CreatePersonRequest, v1.CreatePersonResponse]
	updatePerson                 *connect.Client[v1.UpdatePersonRequest, v1.UpdatePersonResponse]
	updatePersonAddOccupation    *connect.Client[v1.UpdatePersonAddOccupationRequest, v1.UpdatePersonAddOccupationResponse]
	updatePersonRemoveOccupation *connect.Client[v1.UpdatePersonRemoveOccupationRequest, v1.UpdatePersonRemoveOccupationResponse]
	updatePersonAddNickname      *connect.Client[v1.UpdatePersonAddNicknameRequest, v1.UpdatePersonAddNicknameResponse]
	updatePersonRemoveNickname   *connect.Client[v1.UpdatePersonRemoveNicknameRequest, v1.UpdatePersonRemoveNicknameResponse]
	deletePerson                 *connect.Client[v1.DeletePersonRequest, v1.DeletePersonResponse]
	listPersons                  *connect.Client[v1.ListPersonsRequest, v1.ListPersonsResponse]
	searchPerson                 *connect.Client[v1.SearchPersonRequest, v1.SearchPersonResponse]
}

// GetPerson calls movies.v1.MoviesPersonsService.GetPerson.
func (c *moviesPersonsServiceClient) GetPerson(ctx context.Context, req *connect.Request[v1.GetPersonRequest]) (*connect.Response[v1.GetPersonResponse], error) {
	return c.getPerson.CallUnary(ctx, req)
}

// CreatePerson calls movies.v1.MoviesPersonsService.CreatePerson.
func (c *moviesPersonsServiceClient) CreatePerson(ctx context.Context, req *connect.Request[v1.CreatePersonRequest]) (*connect.Response[v1.CreatePersonResponse], error) {
	return c.createPerson.CallUnary(ctx, req)
}

// UpdatePerson calls movies.v1.MoviesPersonsService.UpdatePerson.
func (c *moviesPersonsServiceClient) UpdatePerson(ctx context.Context, req *connect.Request[v1.UpdatePersonRequest]) (*connect.Response[v1.UpdatePersonResponse], error) {
	return c.updatePerson.CallUnary(ctx, req)
}

// UpdatePersonAddOccupation calls movies.v1.MoviesPersonsService.UpdatePersonAddOccupation.
func (c *moviesPersonsServiceClient) UpdatePersonAddOccupation(ctx context.Context, req *connect.Request[v1.UpdatePersonAddOccupationRequest]) (*connect.Response[v1.UpdatePersonAddOccupationResponse], error) {
	return c.updatePersonAddOccupation.CallUnary(ctx, req)
}

// UpdatePersonRemoveOccupation calls movies.v1.MoviesPersonsService.UpdatePersonRemoveOccupation.
func (c *moviesPersonsServiceClient) UpdatePersonRemoveOccupation(ctx context.Context, req *connect.Request[v1.UpdatePersonRemoveOccupationRequest]) (*connect.Response[v1.UpdatePersonRemoveOccupationResponse], error) {
	return c.updatePersonRemoveOccupation.CallUnary(ctx, req)
}

// UpdatePersonAddNickname calls movies.v1.MoviesPersonsService.UpdatePersonAddNickname.
func (c *moviesPersonsServiceClient) UpdatePersonAddNickname(ctx context.Context, req *connect.Request[v1.UpdatePersonAddNicknameRequest]) (*connect.Response[v1.UpdatePersonAddNicknameResponse], error) {
	return c.updatePersonAddNickname.CallUnary(ctx, req)
}

// UpdatePersonRemoveNickname calls movies.v1.MoviesPersonsService.UpdatePersonRemoveNickname.
func (c *moviesPersonsServiceClient) UpdatePersonRemoveNickname(ctx context.Context, req *connect.Request[v1.UpdatePersonRemoveNicknameRequest]) (*connect.Response[v1.UpdatePersonRemoveNicknameResponse], error) {
	return c.updatePersonRemoveNickname.CallUnary(ctx, req)
}

// DeletePerson calls movies.v1.MoviesPersonsService.DeletePerson.
func (c *moviesPersonsServiceClient) DeletePerson(ctx context.Context, req *connect.Request[v1.DeletePersonRequest]) (*connect.Response[v1.DeletePersonResponse], error) {
	return c.deletePerson.CallUnary(ctx, req)
}

// ListPersons calls movies.v1.MoviesPersonsService.ListPersons.
func (c *moviesPersonsServiceClient) ListPersons(ctx context.Context, req *connect.Request[v1.ListPersonsRequest]) (*connect.Response[v1.ListPersonsResponse], error) {
	return c.listPersons.CallUnary(ctx, req)
}

// SearchPerson calls movies.v1.MoviesPersonsService.SearchPerson.
func (c *moviesPersonsServiceClient) SearchPerson(ctx context.Context, req *connect.Request[v1.SearchPersonRequest]) (*connect.Response[v1.SearchPersonResponse], error) {
	return c.searchPerson.CallUnary(ctx, req)
}

// MoviesPersonsServiceHandler is an implementation of the movies.v1.MoviesPersonsService service.
type MoviesPersonsServiceHandler interface {
	GetPerson(context.Context, *connect.Request[v1.GetPersonRequest]) (*connect.Response[v1.GetPersonResponse], error)
	CreatePerson(context.Context, *connect.Request[v1.CreatePersonRequest]) (*connect.Response[v1.CreatePersonResponse], error)
	UpdatePerson(context.Context, *connect.Request[v1.UpdatePersonRequest]) (*connect.Response[v1.UpdatePersonResponse], error)
	UpdatePersonAddOccupation(context.Context, *connect.Request[v1.UpdatePersonAddOccupationRequest]) (*connect.Response[v1.UpdatePersonAddOccupationResponse], error)
	UpdatePersonRemoveOccupation(context.Context, *connect.Request[v1.UpdatePersonRemoveOccupationRequest]) (*connect.Response[v1.UpdatePersonRemoveOccupationResponse], error)
	UpdatePersonAddNickname(context.Context, *connect.Request[v1.UpdatePersonAddNicknameRequest]) (*connect.Response[v1.UpdatePersonAddNicknameResponse], error)
	UpdatePersonRemoveNickname(context.Context, *connect.Request[v1.UpdatePersonRemoveNicknameRequest]) (*connect.Response[v1.UpdatePersonRemoveNicknameResponse], error)
	DeletePerson(context.Context, *connect.Request[v1.DeletePersonRequest]) (*connect.Response[v1.DeletePersonResponse], error)
	ListPersons(context.Context, *connect.Request[v1.ListPersonsRequest]) (*connect.Response[v1.ListPersonsResponse], error)
	SearchPerson(context.Context, *connect.Request[v1.SearchPersonRequest]) (*connect.Response[v1.SearchPersonResponse], error)
}

// NewMoviesPersonsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMoviesPersonsServiceHandler(svc MoviesPersonsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	moviesPersonsServiceGetPersonHandler := connect.NewUnaryHandler(
		MoviesPersonsServiceGetPersonProcedure,
		svc.GetPerson,
		connect.WithSchema(moviesPersonsServiceGetPersonMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesPersonsServiceCreatePersonHandler := connect.NewUnaryHandler(
		MoviesPersonsServiceCreatePersonProcedure,
		svc.CreatePerson,
		connect.WithSchema(moviesPersonsServiceCreatePersonMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesPersonsServiceUpdatePersonHandler := connect.NewUnaryHandler(
		MoviesPersonsServiceUpdatePersonProcedure,
		svc.UpdatePerson,
		connect.WithSchema(moviesPersonsServiceUpdatePersonMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesPersonsServiceUpdatePersonAddOccupationHandler := connect.NewUnaryHandler(
		MoviesPersonsServiceUpdatePersonAddOccupationProcedure,
		svc.UpdatePersonAddOccupation,
		connect.WithSchema(moviesPersonsServiceUpdatePersonAddOccupationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesPersonsServiceUpdatePersonRemoveOccupationHandler := connect.NewUnaryHandler(
		MoviesPersonsServiceUpdatePersonRemoveOccupationProcedure,
		svc.UpdatePersonRemoveOccupation,
		connect.WithSchema(moviesPersonsServiceUpdatePersonRemoveOccupationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesPersonsServiceUpdatePersonAddNicknameHandler := connect.NewUnaryHandler(
		MoviesPersonsServiceUpdatePersonAddNicknameProcedure,
		svc.UpdatePersonAddNickname,
		connect.WithSchema(moviesPersonsServiceUpdatePersonAddNicknameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesPersonsServiceUpdatePersonRemoveNicknameHandler := connect.NewUnaryHandler(
		MoviesPersonsServiceUpdatePersonRemoveNicknameProcedure,
		svc.UpdatePersonRemoveNickname,
		connect.WithSchema(moviesPersonsServiceUpdatePersonRemoveNicknameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesPersonsServiceDeletePersonHandler := connect.NewUnaryHandler(
		MoviesPersonsServiceDeletePersonProcedure,
		svc.DeletePerson,
		connect.WithSchema(moviesPersonsServiceDeletePersonMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesPersonsServiceListPersonsHandler := connect.NewUnaryHandler(
		MoviesPersonsServiceListPersonsProcedure,
		svc.ListPersons,
		connect.WithSchema(moviesPersonsServiceListPersonsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moviesPersonsServiceSearchPersonHandler := connect.NewUnaryHandler(
		MoviesPersonsServiceSearchPersonProcedure,
		svc.SearchPerson,
		connect.WithSchema(moviesPersonsServiceSearchPersonMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/movies.v1.MoviesPersonsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MoviesPersonsServiceGetPersonProcedure:
			moviesPersonsServiceGetPersonHandler.ServeHTTP(w, r)
		case MoviesPersonsServiceCreatePersonProcedure:
			moviesPersonsServiceCreatePersonHandler.ServeHTTP(w, r)
		case MoviesPersonsServiceUpdatePersonProcedure:
			moviesPersonsServiceUpdatePersonHandler.ServeHTTP(w, r)
		case MoviesPersonsServiceUpdatePersonAddOccupationProcedure:
			moviesPersonsServiceUpdatePersonAddOccupationHandler.ServeHTTP(w, r)
		case MoviesPersonsServiceUpdatePersonRemoveOccupationProcedure:
			moviesPersonsServiceUpdatePersonRemoveOccupationHandler.ServeHTTP(w, r)
		case MoviesPersonsServiceUpdatePersonAddNicknameProcedure:
			moviesPersonsServiceUpdatePersonAddNicknameHandler.ServeHTTP(w, r)
		case MoviesPersonsServiceUpdatePersonRemoveNicknameProcedure:
			moviesPersonsServiceUpdatePersonRemoveNicknameHandler.ServeHTTP(w, r)
		case MoviesPersonsServiceDeletePersonProcedure:
			moviesPersonsServiceDeletePersonHandler.ServeHTTP(w, r)
		case MoviesPersonsServiceListPersonsProcedure:
			moviesPersonsServiceListPersonsHandler.ServeHTTP(w, r)
		case MoviesPersonsServiceSearchPersonProcedure:
			moviesPersonsServiceSearchPersonHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMoviesPersonsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMoviesPersonsServiceHandler struct{}

func (UnimplementedMoviesPersonsServiceHandler) GetPerson(context.Context, *connect.Request[v1.GetPersonRequest]) (*connect.Response[v1.GetPersonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesPersonsService.GetPerson is not implemented"))
}

func (UnimplementedMoviesPersonsServiceHandler) CreatePerson(context.Context, *connect.Request[v1.CreatePersonRequest]) (*connect.Response[v1.CreatePersonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesPersonsService.CreatePerson is not implemented"))
}

func (UnimplementedMoviesPersonsServiceHandler) UpdatePerson(context.Context, *connect.Request[v1.UpdatePersonRequest]) (*connect.Response[v1.UpdatePersonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesPersonsService.UpdatePerson is not implemented"))
}

func (UnimplementedMoviesPersonsServiceHandler) UpdatePersonAddOccupation(context.Context, *connect.Request[v1.UpdatePersonAddOccupationRequest]) (*connect.Response[v1.UpdatePersonAddOccupationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesPersonsService.UpdatePersonAddOccupation is not implemented"))
}

func (UnimplementedMoviesPersonsServiceHandler) UpdatePersonRemoveOccupation(context.Context, *connect.Request[v1.UpdatePersonRemoveOccupationRequest]) (*connect.Response[v1.UpdatePersonRemoveOccupationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesPersonsService.UpdatePersonRemoveOccupation is not implemented"))
}

func (UnimplementedMoviesPersonsServiceHandler) UpdatePersonAddNickname(context.Context, *connect.Request[v1.UpdatePersonAddNicknameRequest]) (*connect.Response[v1.UpdatePersonAddNicknameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesPersonsService.UpdatePersonAddNickname is not implemented"))
}

func (UnimplementedMoviesPersonsServiceHandler) UpdatePersonRemoveNickname(context.Context, *connect.Request[v1.UpdatePersonRemoveNicknameRequest]) (*connect.Response[v1.UpdatePersonRemoveNicknameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesPersonsService.UpdatePersonRemoveNickname is not implemented"))
}

func (UnimplementedMoviesPersonsServiceHandler) DeletePerson(context.Context, *connect.Request[v1.DeletePersonRequest]) (*connect.Response[v1.DeletePersonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesPersonsService.DeletePerson is not implemented"))
}

func (UnimplementedMoviesPersonsServiceHandler) ListPersons(context.Context, *connect.Request[v1.ListPersonsRequest]) (*connect.Response[v1.ListPersonsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesPersonsService.ListPersons is not implemented"))
}

func (UnimplementedMoviesPersonsServiceHandler) SearchPerson(context.Context, *connect.Request[v1.SearchPersonRequest]) (*connect.Response[v1.SearchPersonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("movies.v1.MoviesPersonsService.SearchPerson is not implemented"))
}

// MoviesServiceClient is a client for the movies.v1.MoviesService service.
type MoviesServiceClient interface {
}

// NewMoviesServiceClient constructs a client for the movies.v1.MoviesService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMoviesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MoviesServiceClient {
	return &moviesServiceClient{}
}

// moviesServiceClient implements MoviesServiceClient.
type moviesServiceClient struct {
}

// MoviesServiceHandler is an implementation of the movies.v1.MoviesService service.
type MoviesServiceHandler interface {
}

// NewMoviesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMoviesServiceHandler(svc MoviesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/movies.v1.MoviesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMoviesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMoviesServiceHandler struct{}

// MoviesVideosServiceClient is a client for the movies.v1.MoviesVideosService service.
type MoviesVideosServiceClient interface {
}

// NewMoviesVideosServiceClient constructs a client for the movies.v1.MoviesVideosService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMoviesVideosServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MoviesVideosServiceClient {
	return &moviesVideosServiceClient{}
}

// moviesVideosServiceClient implements MoviesVideosServiceClient.
type moviesVideosServiceClient struct {
}

// MoviesVideosServiceHandler is an implementation of the movies.v1.MoviesVideosService service.
type MoviesVideosServiceHandler interface {
}

// NewMoviesVideosServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMoviesVideosServiceHandler(svc MoviesVideosServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/movies.v1.MoviesVideosService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMoviesVideosServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMoviesVideosServiceHandler struct{}

// MoviesReviewsServiceClient is a client for the movies.v1.MoviesReviewsService service.
type MoviesReviewsServiceClient interface {
}

// NewMoviesReviewsServiceClient constructs a client for the movies.v1.MoviesReviewsService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMoviesReviewsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MoviesReviewsServiceClient {
	return &moviesReviewsServiceClient{}
}

// moviesReviewsServiceClient implements MoviesReviewsServiceClient.
type moviesReviewsServiceClient struct {
}

// MoviesReviewsServiceHandler is an implementation of the movies.v1.MoviesReviewsService service.
type MoviesReviewsServiceHandler interface {
}

// NewMoviesReviewsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMoviesReviewsServiceHandler(svc MoviesReviewsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/movies.v1.MoviesReviewsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMoviesReviewsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMoviesReviewsServiceHandler struct{}
