// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: movies/v1/movies.proto

package moviesv1connect

import (
	v1 "bookmymovie.app/bookmymovie/api/gen/movies/v1"
	connect "connectrpc.com/connect"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MoviesServiceName is the fully-qualified name of the MoviesService service.
	MoviesServiceName = "movies.v1.MoviesService"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	moviesServiceServiceDescriptor = v1.File_movies_v1_movies_proto.Services().ByName("MoviesService")
)

// MoviesServiceClient is a client for the movies.v1.MoviesService service.
type MoviesServiceClient interface {
}

// NewMoviesServiceClient constructs a client for the movies.v1.MoviesService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMoviesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MoviesServiceClient {
	return &moviesServiceClient{}
}

// moviesServiceClient implements MoviesServiceClient.
type moviesServiceClient struct {
}

// MoviesServiceHandler is an implementation of the movies.v1.MoviesService service.
type MoviesServiceHandler interface {
}

// NewMoviesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMoviesServiceHandler(svc MoviesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/movies.v1.MoviesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMoviesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMoviesServiceHandler struct{}
