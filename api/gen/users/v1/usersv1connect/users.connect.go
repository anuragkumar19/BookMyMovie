// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: users/v1/users.proto

package usersv1connect

import (
	v1 "bookmymovie.app/bookmymovie/api/gen/users/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UsersServiceName is the fully-qualified name of the UsersService service.
	UsersServiceName = "users.v1.UsersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UsersServiceGetUserInfoProcedure is the fully-qualified name of the UsersService's GetUserInfo
	// RPC.
	UsersServiceGetUserInfoProcedure = "/users.v1.UsersService/GetUserInfo"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	usersServiceServiceDescriptor           = v1.File_users_v1_users_proto.Services().ByName("UsersService")
	usersServiceGetUserInfoMethodDescriptor = usersServiceServiceDescriptor.Methods().ByName("GetUserInfo")
)

// UsersServiceClient is a client for the users.v1.UsersService service.
type UsersServiceClient interface {
	GetUserInfo(context.Context, *connect.Request[v1.GetUserInfoRequest]) (*connect.Response[v1.GetUserInfoResponse], error)
}

// NewUsersServiceClient constructs a client for the users.v1.UsersService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &usersServiceClient{
		getUserInfo: connect.NewClient[v1.GetUserInfoRequest, v1.GetUserInfoResponse](
			httpClient,
			baseURL+UsersServiceGetUserInfoProcedure,
			connect.WithSchema(usersServiceGetUserInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// usersServiceClient implements UsersServiceClient.
type usersServiceClient struct {
	getUserInfo *connect.Client[v1.GetUserInfoRequest, v1.GetUserInfoResponse]
}

// GetUserInfo calls users.v1.UsersService.GetUserInfo.
func (c *usersServiceClient) GetUserInfo(ctx context.Context, req *connect.Request[v1.GetUserInfoRequest]) (*connect.Response[v1.GetUserInfoResponse], error) {
	return c.getUserInfo.CallUnary(ctx, req)
}

// UsersServiceHandler is an implementation of the users.v1.UsersService service.
type UsersServiceHandler interface {
	GetUserInfo(context.Context, *connect.Request[v1.GetUserInfoRequest]) (*connect.Response[v1.GetUserInfoResponse], error)
}

// NewUsersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsersServiceHandler(svc UsersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	usersServiceGetUserInfoHandler := connect.NewUnaryHandler(
		UsersServiceGetUserInfoProcedure,
		svc.GetUserInfo,
		connect.WithSchema(usersServiceGetUserInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/users.v1.UsersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UsersServiceGetUserInfoProcedure:
			usersServiceGetUserInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUsersServiceHandler struct{}

func (UnimplementedUsersServiceHandler) GetUserInfo(context.Context, *connect.Request[v1.GetUserInfoRequest]) (*connect.Response[v1.GetUserInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.v1.UsersService.GetUserInfo is not implemented"))
}
