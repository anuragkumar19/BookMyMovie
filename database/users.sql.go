// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRegularUser = `-- name: CreateRegularUser :one
INSERT INTO
    "users" ("email", "role")
VALUES
    ($1, 'regular_user')
RETURNING
    id
`

func (q *Queries) CreateRegularUser(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRow(ctx, createRegularUser, email)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT
    "id",
    "email",
    "role",
    "version",
    "last_login_token_sent_at",
    "total_login_tokens_sent"
FROM
    "users"
WHERE
    "email" = $1
`

type FindUserByEmailRow struct {
	ID                   int64
	Email                string
	Role                 Roles
	Version              int32
	LastLoginTokenSentAt pgtype.Timestamptz
	TotalLoginTokensSent int32
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.Version,
		&i.LastLoginTokenSentAt,
		&i.TotalLoginTokensSent,
	)
	return i, err
}

const updateUserLoginFields = `-- name: UpdateUserLoginFields :exec
UPDATE "users"
SET
    "last_login_token_sent_at" = $1,
    "total_login_tokens_sent" = $2
WHERE
    "id" = $3
    AND "version" = $4
`

type UpdateUserLoginFieldsParams struct {
	LastLoginTokenSentAt pgtype.Timestamptz
	TotalLoginTokensSent int32
	ID                   int64
	Version              int32
}

func (q *Queries) UpdateUserLoginFields(ctx context.Context, arg *UpdateUserLoginFieldsParams) error {
	_, err := q.db.Exec(ctx, updateUserLoginFields,
		arg.LastLoginTokenSentAt,
		arg.TotalLoginTokensSent,
		arg.ID,
		arg.Version,
	)
	return err
}
