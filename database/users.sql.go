// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRegularUser = `-- name: CreateRegularUser :exec
INSERT INTO
    "users" ("id", "email", "role")
VALUES
    ($1, $2, 'regular_user')
`

type CreateRegularUserParams struct {
	ID    []byte `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) CreateRegularUser(ctx context.Context, arg *CreateRegularUserParams) error {
	_, err := q.db.Exec(ctx, createRegularUser, arg.ID, arg.Email)
	return err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT
    "id",
    "email",
    "version",
    "last_login_token_sent_at",
    "total_login_tokens_sent"
FROM
    "users"
WHERE
    "email" = $1
`

type FindUserByEmailRow struct {
	ID                   []byte             `json:"id"`
	Email                string             `json:"email"`
	Version              int32              `json:"version"`
	LastLoginTokenSentAt pgtype.Timestamptz `json:"last_login_token_sent_at"`
	TotalLoginTokensSent int32              `json:"total_login_tokens_sent"`
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Version,
		&i.LastLoginTokenSentAt,
		&i.TotalLoginTokensSent,
	)
	return i, err
}

const updateUserLoginFields = `-- name: UpdateUserLoginFields :exec
UPDATE "users"
SET
    "last_login_token_sent_at" = $1,
    "total_login_tokens_sent" = $2
WHERE
    "id" = $3
    AND "version" = $4
`

type UpdateUserLoginFieldsParams struct {
	LastLoginTokenSentAt pgtype.Timestamptz `json:"last_login_token_sent_at"`
	TotalLoginTokensSent int32              `json:"total_login_tokens_sent"`
	ID                   []byte             `json:"id"`
	Version              int32              `json:"version"`
}

func (q *Queries) UpdateUserLoginFields(ctx context.Context, arg *UpdateUserLoginFieldsParams) error {
	_, err := q.db.Exec(ctx, updateUserLoginFields,
		arg.LastLoginTokenSentAt,
		arg.TotalLoginTokensSent,
		arg.ID,
		arg.Version,
	)
	return err
}
