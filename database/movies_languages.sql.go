// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: movies_languages.sql

package database

import (
	"context"
)

const createMoviesLanguage = `-- name: CreateMoviesLanguage :one
INSERT INTO
    "movies_languages" ("slug", "display_name", "english_name")
VALUES
    ($1, $2, $3)
RETURNING
    id, created_at, display_name, english_name, slug
`

type CreateMoviesLanguageParams struct {
	Slug        string
	DisplayName string
	EnglishName string
}

func (q *Queries) CreateMoviesLanguage(ctx context.Context, arg *CreateMoviesLanguageParams) (MoviesLanguage, error) {
	row := q.db.QueryRow(ctx, createMoviesLanguage, arg.Slug, arg.DisplayName, arg.EnglishName)
	var i MoviesLanguage
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.DisplayName,
		&i.EnglishName,
		&i.Slug,
	)
	return i, err
}

const deleteMoviesLanguage = `-- name: DeleteMoviesLanguage :exec
DELETE FROM "movies_languages"
WHERE
    id = $1
`

func (q *Queries) DeleteMoviesLanguage(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMoviesLanguage, id)
	return err
}

const getAllMoviesLanguages = `-- name: GetAllMoviesLanguages :many
SELECT
    id, created_at, display_name, english_name, slug
FROM
    "movies_languages"
`

func (q *Queries) GetAllMoviesLanguages(ctx context.Context) ([]MoviesLanguage, error) {
	rows, err := q.db.Query(ctx, getAllMoviesLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MoviesLanguage
	for rows.Next() {
		var i MoviesLanguage
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.DisplayName,
			&i.EnglishName,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoviesLanguageByID = `-- name: GetMoviesLanguageByID :one
SELECT
    id, created_at, display_name, english_name, slug
FROM
    "movies_languages"
WHERE
    "id" = $1
`

func (q *Queries) GetMoviesLanguageByID(ctx context.Context, id int64) (MoviesLanguage, error) {
	row := q.db.QueryRow(ctx, getMoviesLanguageByID, id)
	var i MoviesLanguage
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.DisplayName,
		&i.EnglishName,
		&i.Slug,
	)
	return i, err
}
