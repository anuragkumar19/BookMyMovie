// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: movies_genres.sql

package database

import (
	"context"
)

const checkIfAnyMoviesGenresJoinExist = `-- name: CheckIfAnyMoviesGenresJoinExist :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            "movies_genres_join"
        WHERE
            "movies_genre_id" = $1
    )
`

func (q *Queries) CheckIfAnyMoviesGenresJoinExist(ctx context.Context, moviesGenreID int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkIfAnyMoviesGenresJoinExist, moviesGenreID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createMoviesGenre = `-- name: CreateMoviesGenre :one
INSERT INTO
    "movies_genres" ("slug", "display_name", "about")
VALUES
    ($1, $2, $3)
RETURNING
    id, created_at, version, slug, display_name, about
`

type CreateMoviesGenreParams struct {
	Slug        string
	DisplayName string
	About       string
}

func (q *Queries) CreateMoviesGenre(ctx context.Context, arg *CreateMoviesGenreParams) (MoviesGenre, error) {
	row := q.db.QueryRow(ctx, createMoviesGenre, arg.Slug, arg.DisplayName, arg.About)
	var i MoviesGenre
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Version,
		&i.Slug,
		&i.DisplayName,
		&i.About,
	)
	return i, err
}

const deleteMoviesGenre = `-- name: DeleteMoviesGenre :exec
DELETE FROM "movies_genres"
WHERE
    id = $1
`

func (q *Queries) DeleteMoviesGenre(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMoviesGenre, id)
	return err
}

const getAllMoviesGenres = `-- name: GetAllMoviesGenres :many
SELECT
    id, created_at, version, slug, display_name, about
FROM
    "movies_genres"
`

func (q *Queries) GetAllMoviesGenres(ctx context.Context) ([]MoviesGenre, error) {
	rows, err := q.db.Query(ctx, getAllMoviesGenres)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MoviesGenre
	for rows.Next() {
		var i MoviesGenre
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Version,
			&i.Slug,
			&i.DisplayName,
			&i.About,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoviesGenreByID = `-- name: GetMoviesGenreByID :one
SELECT
    id, created_at, version, slug, display_name, about
FROM
    "movies_genres"
WHERE
    "id" = $1
`

func (q *Queries) GetMoviesGenreByID(ctx context.Context, id int64) (MoviesGenre, error) {
	row := q.db.QueryRow(ctx, getMoviesGenreByID, id)
	var i MoviesGenre
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Version,
		&i.Slug,
		&i.DisplayName,
		&i.About,
	)
	return i, err
}

const updateMoviesGenre = `-- name: UpdateMoviesGenre :exec
UPDATE "movies_genres"
SET
    "slug" = $1,
    "display_name" = $2,
    "about" = $3
WHERE
    "id" = $4
    AND "version" = $5
`

type UpdateMoviesGenreParams struct {
	Slug        string
	DisplayName string
	About       string
	ID          int64
	Version     int32
}

func (q *Queries) UpdateMoviesGenre(ctx context.Context, arg *UpdateMoviesGenreParams) error {
	_, err := q.db.Exec(ctx, updateMoviesGenre,
		arg.Slug,
		arg.DisplayName,
		arg.About,
		arg.ID,
		arg.Version,
	)
	return err
}
