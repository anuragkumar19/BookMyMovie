// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Roles string

const (
	RolesRegularUser Roles = "regular_user"
)

func (e *Roles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Roles(s)
	case string:
		*e = Roles(s)
	default:
		return fmt.Errorf("unsupported scan type for Roles: %T", src)
	}
	return nil
}

type NullRoles struct {
	Roles Roles `json:"roles"`
	Valid bool  `json:"valid"` // Valid is true if Roles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoles) Scan(value interface{}) error {
	if value == nil {
		ns.Roles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Roles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Roles), nil
}

func (e Roles) Valid() bool {
	switch e {
	case RolesRegularUser:
		return true
	}
	return false
}

func AllRolesValues() []Roles {
	return []Roles{
		RolesRegularUser,
	}
}

type LoginToken struct {
	Token         string             `json:"token"`
	Version       int32              `json:"version"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UserID        int64              `json:"user_id"`
	Otp           string             `json:"otp"`
	ExpireAt      pgtype.Timestamptz `json:"expire_at"`
	LastAttemptAt pgtype.Timestamptz `json:"last_attempt_at"`
	TotalAttempts int32              `json:"total_attempts"`
}

type RefreshToken struct {
	Token     int64              `json:"token"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UserID    int64              `json:"user_id"`
	ExpireAt  pgtype.Timestamptz `json:"expire_at"`
}

type User struct {
	ID                   int64              `json:"id"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	Version              int32              `json:"version"`
	Name                 string             `json:"name"`
	Email                string             `json:"email"`
	Role                 Roles              `json:"role"`
	Dob                  pgtype.Date        `json:"dob"`
	LastLoginTokenSentAt pgtype.Timestamptz `json:"last_login_token_sent_at"`
	TotalLoginTokensSent int32              `json:"total_login_tokens_sent"`
}
