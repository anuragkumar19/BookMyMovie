// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type MoviesIndiaCbfcRatings string

const (
	MoviesIndiaCbfcRatingsU  MoviesIndiaCbfcRatings = "U"
	MoviesIndiaCbfcRatingsUA MoviesIndiaCbfcRatings = "U/A"
	MoviesIndiaCbfcRatingsA  MoviesIndiaCbfcRatings = "A"
	MoviesIndiaCbfcRatingsS  MoviesIndiaCbfcRatings = "S"
)

func (e *MoviesIndiaCbfcRatings) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MoviesIndiaCbfcRatings(s)
	case string:
		*e = MoviesIndiaCbfcRatings(s)
	default:
		return fmt.Errorf("unsupported scan type for MoviesIndiaCbfcRatings: %T", src)
	}
	return nil
}

type NullMoviesIndiaCbfcRatings struct {
	MoviesIndiaCbfcRatings MoviesIndiaCbfcRatings
	Valid                  bool // Valid is true if MoviesIndiaCbfcRatings is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMoviesIndiaCbfcRatings) Scan(value interface{}) error {
	if value == nil {
		ns.MoviesIndiaCbfcRatings, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MoviesIndiaCbfcRatings.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMoviesIndiaCbfcRatings) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MoviesIndiaCbfcRatings), nil
}

func (e MoviesIndiaCbfcRatings) Valid() bool {
	switch e {
	case MoviesIndiaCbfcRatingsU,
		MoviesIndiaCbfcRatingsUA,
		MoviesIndiaCbfcRatingsA,
		MoviesIndiaCbfcRatingsS:
		return true
	}
	return false
}

func AllMoviesIndiaCbfcRatingsValues() []MoviesIndiaCbfcRatings {
	return []MoviesIndiaCbfcRatings{
		MoviesIndiaCbfcRatingsU,
		MoviesIndiaCbfcRatingsUA,
		MoviesIndiaCbfcRatingsA,
		MoviesIndiaCbfcRatingsS,
	}
}

type MoviesMpaRatings string

const (
	MoviesMpaRatingsG    MoviesMpaRatings = "G"
	MoviesMpaRatingsPG   MoviesMpaRatings = "PG"
	MoviesMpaRatingsPG13 MoviesMpaRatings = "PG-13"
	MoviesMpaRatingsR    MoviesMpaRatings = "R"
	MoviesMpaRatingsNC17 MoviesMpaRatings = "NC-17"
)

func (e *MoviesMpaRatings) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MoviesMpaRatings(s)
	case string:
		*e = MoviesMpaRatings(s)
	default:
		return fmt.Errorf("unsupported scan type for MoviesMpaRatings: %T", src)
	}
	return nil
}

type NullMoviesMpaRatings struct {
	MoviesMpaRatings MoviesMpaRatings
	Valid            bool // Valid is true if MoviesMpaRatings is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMoviesMpaRatings) Scan(value interface{}) error {
	if value == nil {
		ns.MoviesMpaRatings, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MoviesMpaRatings.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMoviesMpaRatings) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MoviesMpaRatings), nil
}

func (e MoviesMpaRatings) Valid() bool {
	switch e {
	case MoviesMpaRatingsG,
		MoviesMpaRatingsPG,
		MoviesMpaRatingsPG13,
		MoviesMpaRatingsR,
		MoviesMpaRatingsNC17:
		return true
	}
	return false
}

func AllMoviesMpaRatingsValues() []MoviesMpaRatings {
	return []MoviesMpaRatings{
		MoviesMpaRatingsG,
		MoviesMpaRatingsPG,
		MoviesMpaRatingsPG13,
		MoviesMpaRatingsR,
		MoviesMpaRatingsNC17,
	}
}

type Roles string

const (
	RolesRegularUser Roles = "regular_user"
	RolesAdmin       Roles = "admin"
)

func (e *Roles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Roles(s)
	case string:
		*e = Roles(s)
	default:
		return fmt.Errorf("unsupported scan type for Roles: %T", src)
	}
	return nil
}

type NullRoles struct {
	Roles Roles
	Valid bool // Valid is true if Roles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoles) Scan(value interface{}) error {
	if value == nil {
		ns.Roles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Roles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Roles), nil
}

func (e Roles) Valid() bool {
	switch e {
	case RolesRegularUser,
		RolesAdmin:
		return true
	}
	return false
}

func AllRolesValues() []Roles {
	return []Roles{
		RolesRegularUser,
		RolesAdmin,
	}
}

type City struct {
	ID          string
	CreatedAt   pgtype.Timestamptz
	DisplayName string
	State       string
	Coordinates string
}

type LoginToken struct {
	Token         string
	Version       int32
	CreatedAt     pgtype.Timestamptz
	UserID        int64
	Otp           string
	ExpireAt      pgtype.Timestamptz
	LastAttemptAt pgtype.Timestamptz
	TotalAttempts int32
}

type Movie struct {
	ID                         int64
	CreatedAt                  pgtype.Timestamptz
	Version                    int32
	Title                      string
	Slug                       string
	Poster                     string
	RunningDurationInMinutes   int32
	AvailableAudioLanguages    []int64
	AvailableSubtitleLanguages []int64
	AvailableFormats           []int64
	Rating                     string
	TotalRatingCount           int32
	Genres                     []int64
	ReleaseDate                pgtype.Date
	IsInCinema                 bool
	IndiaCbfcRating            MoviesIndiaCbfcRatings
	MpaRating                  MoviesMpaRatings
	About                      string
	ImdbID                     string
	ImdbRating                 string
	ImdbLastSyncedAt           pgtype.Timestamptz
}

type MoviesAvailableAudioLanguage struct {
	MovieID          int64
	MoviesLanguageID int64
	Index            int32
}

type MoviesAvailableFormat struct {
	MovieID        int64
	MoviesFormatID int64
	Index          int32
}

type MoviesAvailableSubtitleLanguage struct {
	MovieID          int64
	MoviesLanguageID int64
	Index            int32
}

type MoviesCast struct {
	MovieID        int64
	MoviesPersonID int64
	Index          int32
}

type MoviesCrew struct {
	MovieID        int64
	MoviesPersonID int64
	Index          int32
}

type MoviesFormat struct {
	ID          int64
	CreatedAt   pgtype.Timestamptz
	DisplayName string
	Slug        string
	About       string
}

type MoviesGenre struct {
	ID          int64
	CreatedAt   pgtype.Timestamptz
	Slug        string
	DisplayName string
	About       string
}

type MoviesGenresJoin struct {
	MovieID       int64
	MoviesGenreID int64
	Index         int32
}

type MoviesLanguage struct {
	ID          int64
	CreatedAt   pgtype.Timestamptz
	DisplayName string
	EnglishName string
	Slug        string
}

type MoviesPerson struct {
	ID               int64
	CreatedAt        pgtype.Timestamptz
	Version          int32
	Name             string
	Slug             string
	Nicknames        []string
	ProfilePicture   string
	Occupations      []string
	Dob              pgtype.Date
	About            string
	ImdbID           string
	ImdbLastSyncedAt pgtype.Timestamptz
}

type MoviesReview struct {
	ID        int64
	CreatedAt pgtype.Timestamptz
	Version   int32
	MovieID   int64
	AuthorID  int64
	Text      string
	Rating    int32
}

type MoviesVideo struct {
	ID          int64
	CreatedAt   pgtype.Timestamptz
	Version     int32
	MovieID     int64
	Language    string
	YoutubeLink string
	Index       int32
}

type RefreshToken struct {
	ID        int64
	Token     string
	CreatedAt pgtype.Timestamptz
	UserID    int64
	UserRole  Roles
	ExpireAt  pgtype.Timestamptz
	UserAgent string
}

type User struct {
	ID                   int64
	CreatedAt            pgtype.Timestamptz
	Version              int32
	Name                 string
	Email                string
	Role                 Roles
	Dob                  pgtype.Date
	LastLoginTokenSentAt pgtype.Timestamptz
	TotalLoginTokensSent int32
}
