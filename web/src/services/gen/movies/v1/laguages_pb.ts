// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file movies/v1/laguages.proto (package movies.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message movies.v1.Language
 */
export class Language extends Message<Language> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * @generated from field: string english_name = 3;
   */
  englishName = "";

  /**
   * @generated from field: string slug = 4;
   */
  slug = "";

  constructor(data?: PartialMessage<Language>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.Language";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "english_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Language {
    return new Language().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Language {
    return new Language().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Language {
    return new Language().fromJsonString(jsonString, options);
  }

  static equals(a: Language | PlainMessage<Language> | undefined, b: Language | PlainMessage<Language> | undefined): boolean {
    return proto3.util.equals(Language, a, b);
  }
}

/**
 * @generated from message movies.v1.GetLanguageRequest
 */
export class GetLanguageRequest extends Message<GetLanguageRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<GetLanguageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.GetLanguageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLanguageRequest {
    return new GetLanguageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLanguageRequest {
    return new GetLanguageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLanguageRequest {
    return new GetLanguageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLanguageRequest | PlainMessage<GetLanguageRequest> | undefined, b: GetLanguageRequest | PlainMessage<GetLanguageRequest> | undefined): boolean {
    return proto3.util.equals(GetLanguageRequest, a, b);
  }
}

/**
 * @generated from message movies.v1.GetLanguageResponse
 */
export class GetLanguageResponse extends Message<GetLanguageResponse> {
  /**
   * @generated from field: movies.v1.Language language = 1;
   */
  language?: Language;

  constructor(data?: PartialMessage<GetLanguageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.GetLanguageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "language", kind: "message", T: Language },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLanguageResponse {
    return new GetLanguageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLanguageResponse {
    return new GetLanguageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLanguageResponse {
    return new GetLanguageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLanguageResponse | PlainMessage<GetLanguageResponse> | undefined, b: GetLanguageResponse | PlainMessage<GetLanguageResponse> | undefined): boolean {
    return proto3.util.equals(GetLanguageResponse, a, b);
  }
}

/**
 * @generated from message movies.v1.GetLanguagesRequest
 */
export class GetLanguagesRequest extends Message<GetLanguagesRequest> {
  constructor(data?: PartialMessage<GetLanguagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.GetLanguagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLanguagesRequest {
    return new GetLanguagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLanguagesRequest {
    return new GetLanguagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLanguagesRequest {
    return new GetLanguagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLanguagesRequest | PlainMessage<GetLanguagesRequest> | undefined, b: GetLanguagesRequest | PlainMessage<GetLanguagesRequest> | undefined): boolean {
    return proto3.util.equals(GetLanguagesRequest, a, b);
  }
}

/**
 * @generated from message movies.v1.GetLanguagesResponse
 */
export class GetLanguagesResponse extends Message<GetLanguagesResponse> {
  /**
   * @generated from field: repeated movies.v1.Language languages = 1;
   */
  languages: Language[] = [];

  constructor(data?: PartialMessage<GetLanguagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.GetLanguagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "languages", kind: "message", T: Language, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLanguagesResponse {
    return new GetLanguagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLanguagesResponse {
    return new GetLanguagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLanguagesResponse {
    return new GetLanguagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLanguagesResponse | PlainMessage<GetLanguagesResponse> | undefined, b: GetLanguagesResponse | PlainMessage<GetLanguagesResponse> | undefined): boolean {
    return proto3.util.equals(GetLanguagesResponse, a, b);
  }
}

/**
 * @generated from message movies.v1.CreateLanguageRequest
 */
export class CreateLanguageRequest extends Message<CreateLanguageRequest> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * @generated from field: string english_name = 2;
   */
  englishName = "";

  constructor(data?: PartialMessage<CreateLanguageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.CreateLanguageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "english_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateLanguageRequest {
    return new CreateLanguageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateLanguageRequest {
    return new CreateLanguageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateLanguageRequest {
    return new CreateLanguageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateLanguageRequest | PlainMessage<CreateLanguageRequest> | undefined, b: CreateLanguageRequest | PlainMessage<CreateLanguageRequest> | undefined): boolean {
    return proto3.util.equals(CreateLanguageRequest, a, b);
  }
}

/**
 * @generated from message movies.v1.CreateLanguageResponse
 */
export class CreateLanguageResponse extends Message<CreateLanguageResponse> {
  /**
   * @generated from field: movies.v1.Language language = 1;
   */
  language?: Language;

  constructor(data?: PartialMessage<CreateLanguageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.CreateLanguageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "language", kind: "message", T: Language },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateLanguageResponse {
    return new CreateLanguageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateLanguageResponse {
    return new CreateLanguageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateLanguageResponse {
    return new CreateLanguageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateLanguageResponse | PlainMessage<CreateLanguageResponse> | undefined, b: CreateLanguageResponse | PlainMessage<CreateLanguageResponse> | undefined): boolean {
    return proto3.util.equals(CreateLanguageResponse, a, b);
  }
}

/**
 * @generated from message movies.v1.UpdateLanguageRequest
 */
export class UpdateLanguageRequest extends Message<UpdateLanguageRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: optional string display_name = 2;
   */
  displayName?: string;

  /**
   * @generated from field: optional string english_name = 3;
   */
  englishName?: string;

  constructor(data?: PartialMessage<UpdateLanguageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.UpdateLanguageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "english_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateLanguageRequest {
    return new UpdateLanguageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateLanguageRequest {
    return new UpdateLanguageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateLanguageRequest {
    return new UpdateLanguageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateLanguageRequest | PlainMessage<UpdateLanguageRequest> | undefined, b: UpdateLanguageRequest | PlainMessage<UpdateLanguageRequest> | undefined): boolean {
    return proto3.util.equals(UpdateLanguageRequest, a, b);
  }
}

/**
 * @generated from message movies.v1.UpdateLanguageResponse
 */
export class UpdateLanguageResponse extends Message<UpdateLanguageResponse> {
  /**
   * @generated from field: movies.v1.Language language = 1;
   */
  language?: Language;

  constructor(data?: PartialMessage<UpdateLanguageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.UpdateLanguageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "language", kind: "message", T: Language },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateLanguageResponse {
    return new UpdateLanguageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateLanguageResponse {
    return new UpdateLanguageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateLanguageResponse {
    return new UpdateLanguageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateLanguageResponse | PlainMessage<UpdateLanguageResponse> | undefined, b: UpdateLanguageResponse | PlainMessage<UpdateLanguageResponse> | undefined): boolean {
    return proto3.util.equals(UpdateLanguageResponse, a, b);
  }
}

/**
 * @generated from message movies.v1.DeleteLanguageRequest
 */
export class DeleteLanguageRequest extends Message<DeleteLanguageRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteLanguageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.DeleteLanguageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteLanguageRequest {
    return new DeleteLanguageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteLanguageRequest {
    return new DeleteLanguageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteLanguageRequest {
    return new DeleteLanguageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteLanguageRequest | PlainMessage<DeleteLanguageRequest> | undefined, b: DeleteLanguageRequest | PlainMessage<DeleteLanguageRequest> | undefined): boolean {
    return proto3.util.equals(DeleteLanguageRequest, a, b);
  }
}

/**
 * @generated from message movies.v1.DeleteLanguageResponse
 */
export class DeleteLanguageResponse extends Message<DeleteLanguageResponse> {
  constructor(data?: PartialMessage<DeleteLanguageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.DeleteLanguageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteLanguageResponse {
    return new DeleteLanguageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteLanguageResponse {
    return new DeleteLanguageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteLanguageResponse {
    return new DeleteLanguageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteLanguageResponse | PlainMessage<DeleteLanguageResponse> | undefined, b: DeleteLanguageResponse | PlainMessage<DeleteLanguageResponse> | undefined): boolean {
    return proto3.util.equals(DeleteLanguageResponse, a, b);
  }
}

