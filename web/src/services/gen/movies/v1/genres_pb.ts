// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file movies/v1/genres.proto (package movies.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message movies.v1.Genre
 */
export class Genre extends Message<Genre> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * @generated from field: string about = 3;
   */
  about = "";

  /**
   * @generated from field: string slug = 4;
   */
  slug = "";

  constructor(data?: PartialMessage<Genre>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.Genre";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "about", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Genre {
    return new Genre().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Genre {
    return new Genre().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Genre {
    return new Genre().fromJsonString(jsonString, options);
  }

  static equals(a: Genre | PlainMessage<Genre> | undefined, b: Genre | PlainMessage<Genre> | undefined): boolean {
    return proto3.util.equals(Genre, a, b);
  }
}

/**
 * @generated from message movies.v1.GetGenreRequest
 */
export class GetGenreRequest extends Message<GetGenreRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<GetGenreRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.GetGenreRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGenreRequest {
    return new GetGenreRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGenreRequest {
    return new GetGenreRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGenreRequest {
    return new GetGenreRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGenreRequest | PlainMessage<GetGenreRequest> | undefined, b: GetGenreRequest | PlainMessage<GetGenreRequest> | undefined): boolean {
    return proto3.util.equals(GetGenreRequest, a, b);
  }
}

/**
 * @generated from message movies.v1.GetGenreResponse
 */
export class GetGenreResponse extends Message<GetGenreResponse> {
  /**
   * @generated from field: movies.v1.Genre genre = 1;
   */
  genre?: Genre;

  constructor(data?: PartialMessage<GetGenreResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.GetGenreResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "genre", kind: "message", T: Genre },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGenreResponse {
    return new GetGenreResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGenreResponse {
    return new GetGenreResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGenreResponse {
    return new GetGenreResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGenreResponse | PlainMessage<GetGenreResponse> | undefined, b: GetGenreResponse | PlainMessage<GetGenreResponse> | undefined): boolean {
    return proto3.util.equals(GetGenreResponse, a, b);
  }
}

/**
 * @generated from message movies.v1.GetGenresRequest
 */
export class GetGenresRequest extends Message<GetGenresRequest> {
  constructor(data?: PartialMessage<GetGenresRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.GetGenresRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGenresRequest {
    return new GetGenresRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGenresRequest {
    return new GetGenresRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGenresRequest {
    return new GetGenresRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGenresRequest | PlainMessage<GetGenresRequest> | undefined, b: GetGenresRequest | PlainMessage<GetGenresRequest> | undefined): boolean {
    return proto3.util.equals(GetGenresRequest, a, b);
  }
}

/**
 * @generated from message movies.v1.GetGenresResponse
 */
export class GetGenresResponse extends Message<GetGenresResponse> {
  /**
   * @generated from field: repeated movies.v1.Genre genres = 1;
   */
  genres: Genre[] = [];

  constructor(data?: PartialMessage<GetGenresResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.GetGenresResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "genres", kind: "message", T: Genre, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGenresResponse {
    return new GetGenresResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGenresResponse {
    return new GetGenresResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGenresResponse {
    return new GetGenresResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGenresResponse | PlainMessage<GetGenresResponse> | undefined, b: GetGenresResponse | PlainMessage<GetGenresResponse> | undefined): boolean {
    return proto3.util.equals(GetGenresResponse, a, b);
  }
}

/**
 * @generated from message movies.v1.CreateGenreRequest
 */
export class CreateGenreRequest extends Message<CreateGenreRequest> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * @generated from field: string about = 2;
   */
  about = "";

  constructor(data?: PartialMessage<CreateGenreRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.CreateGenreRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "about", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateGenreRequest {
    return new CreateGenreRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateGenreRequest {
    return new CreateGenreRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateGenreRequest {
    return new CreateGenreRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateGenreRequest | PlainMessage<CreateGenreRequest> | undefined, b: CreateGenreRequest | PlainMessage<CreateGenreRequest> | undefined): boolean {
    return proto3.util.equals(CreateGenreRequest, a, b);
  }
}

/**
 * @generated from message movies.v1.CreateGenreResponse
 */
export class CreateGenreResponse extends Message<CreateGenreResponse> {
  /**
   * @generated from field: movies.v1.Genre genre = 1;
   */
  genre?: Genre;

  constructor(data?: PartialMessage<CreateGenreResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.CreateGenreResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "genre", kind: "message", T: Genre },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateGenreResponse {
    return new CreateGenreResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateGenreResponse {
    return new CreateGenreResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateGenreResponse {
    return new CreateGenreResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateGenreResponse | PlainMessage<CreateGenreResponse> | undefined, b: CreateGenreResponse | PlainMessage<CreateGenreResponse> | undefined): boolean {
    return proto3.util.equals(CreateGenreResponse, a, b);
  }
}

/**
 * @generated from message movies.v1.UpdateGenreRequest
 */
export class UpdateGenreRequest extends Message<UpdateGenreRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: optional string display_name = 2;
   */
  displayName?: string;

  /**
   * @generated from field: optional string about = 3;
   */
  about?: string;

  constructor(data?: PartialMessage<UpdateGenreRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.UpdateGenreRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "about", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateGenreRequest {
    return new UpdateGenreRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateGenreRequest {
    return new UpdateGenreRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateGenreRequest {
    return new UpdateGenreRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateGenreRequest | PlainMessage<UpdateGenreRequest> | undefined, b: UpdateGenreRequest | PlainMessage<UpdateGenreRequest> | undefined): boolean {
    return proto3.util.equals(UpdateGenreRequest, a, b);
  }
}

/**
 * @generated from message movies.v1.UpdateGenreResponse
 */
export class UpdateGenreResponse extends Message<UpdateGenreResponse> {
  /**
   * @generated from field: movies.v1.Genre genre = 1;
   */
  genre?: Genre;

  constructor(data?: PartialMessage<UpdateGenreResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.UpdateGenreResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "genre", kind: "message", T: Genre },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateGenreResponse {
    return new UpdateGenreResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateGenreResponse {
    return new UpdateGenreResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateGenreResponse {
    return new UpdateGenreResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateGenreResponse | PlainMessage<UpdateGenreResponse> | undefined, b: UpdateGenreResponse | PlainMessage<UpdateGenreResponse> | undefined): boolean {
    return proto3.util.equals(UpdateGenreResponse, a, b);
  }
}

/**
 * @generated from message movies.v1.DeleteGenreRequest
 */
export class DeleteGenreRequest extends Message<DeleteGenreRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteGenreRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.DeleteGenreRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteGenreRequest {
    return new DeleteGenreRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteGenreRequest {
    return new DeleteGenreRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteGenreRequest {
    return new DeleteGenreRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteGenreRequest | PlainMessage<DeleteGenreRequest> | undefined, b: DeleteGenreRequest | PlainMessage<DeleteGenreRequest> | undefined): boolean {
    return proto3.util.equals(DeleteGenreRequest, a, b);
  }
}

/**
 * @generated from message movies.v1.DeleteGenreResponse
 */
export class DeleteGenreResponse extends Message<DeleteGenreResponse> {
  constructor(data?: PartialMessage<DeleteGenreResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.DeleteGenreResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteGenreResponse {
    return new DeleteGenreResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteGenreResponse {
    return new DeleteGenreResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteGenreResponse {
    return new DeleteGenreResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteGenreResponse | PlainMessage<DeleteGenreResponse> | undefined, b: DeleteGenreResponse | PlainMessage<DeleteGenreResponse> | undefined): boolean {
    return proto3.util.equals(DeleteGenreResponse, a, b);
  }
}

