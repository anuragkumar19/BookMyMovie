// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file movies/v1/formats.proto (package movies.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message movies.v1.Format
 */
export class Format extends Message<Format> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * @generated from field: string about = 3;
   */
  about = "";

  /**
   * @generated from field: string slug = 4;
   */
  slug = "";

  constructor(data?: PartialMessage<Format>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.Format";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "about", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Format {
    return new Format().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Format {
    return new Format().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Format {
    return new Format().fromJsonString(jsonString, options);
  }

  static equals(a: Format | PlainMessage<Format> | undefined, b: Format | PlainMessage<Format> | undefined): boolean {
    return proto3.util.equals(Format, a, b);
  }
}

/**
 * @generated from message movies.v1.GetFormatRequest
 */
export class GetFormatRequest extends Message<GetFormatRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<GetFormatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.GetFormatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFormatRequest {
    return new GetFormatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFormatRequest {
    return new GetFormatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFormatRequest {
    return new GetFormatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFormatRequest | PlainMessage<GetFormatRequest> | undefined, b: GetFormatRequest | PlainMessage<GetFormatRequest> | undefined): boolean {
    return proto3.util.equals(GetFormatRequest, a, b);
  }
}

/**
 * @generated from message movies.v1.GetFormatResponse
 */
export class GetFormatResponse extends Message<GetFormatResponse> {
  /**
   * @generated from field: movies.v1.Format format = 1;
   */
  format?: Format;

  constructor(data?: PartialMessage<GetFormatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.GetFormatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "format", kind: "message", T: Format },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFormatResponse {
    return new GetFormatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFormatResponse {
    return new GetFormatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFormatResponse {
    return new GetFormatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFormatResponse | PlainMessage<GetFormatResponse> | undefined, b: GetFormatResponse | PlainMessage<GetFormatResponse> | undefined): boolean {
    return proto3.util.equals(GetFormatResponse, a, b);
  }
}

/**
 * @generated from message movies.v1.GetFormatsRequest
 */
export class GetFormatsRequest extends Message<GetFormatsRequest> {
  constructor(data?: PartialMessage<GetFormatsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.GetFormatsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFormatsRequest {
    return new GetFormatsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFormatsRequest {
    return new GetFormatsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFormatsRequest {
    return new GetFormatsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFormatsRequest | PlainMessage<GetFormatsRequest> | undefined, b: GetFormatsRequest | PlainMessage<GetFormatsRequest> | undefined): boolean {
    return proto3.util.equals(GetFormatsRequest, a, b);
  }
}

/**
 * @generated from message movies.v1.GetFormatsResponse
 */
export class GetFormatsResponse extends Message<GetFormatsResponse> {
  /**
   * @generated from field: repeated movies.v1.Format formats = 1;
   */
  formats: Format[] = [];

  constructor(data?: PartialMessage<GetFormatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.GetFormatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "formats", kind: "message", T: Format, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFormatsResponse {
    return new GetFormatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFormatsResponse {
    return new GetFormatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFormatsResponse {
    return new GetFormatsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFormatsResponse | PlainMessage<GetFormatsResponse> | undefined, b: GetFormatsResponse | PlainMessage<GetFormatsResponse> | undefined): boolean {
    return proto3.util.equals(GetFormatsResponse, a, b);
  }
}

/**
 * @generated from message movies.v1.CreateFormatRequest
 */
export class CreateFormatRequest extends Message<CreateFormatRequest> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * @generated from field: string about = 2;
   */
  about = "";

  constructor(data?: PartialMessage<CreateFormatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.CreateFormatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "about", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFormatRequest {
    return new CreateFormatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFormatRequest {
    return new CreateFormatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFormatRequest {
    return new CreateFormatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFormatRequest | PlainMessage<CreateFormatRequest> | undefined, b: CreateFormatRequest | PlainMessage<CreateFormatRequest> | undefined): boolean {
    return proto3.util.equals(CreateFormatRequest, a, b);
  }
}

/**
 * @generated from message movies.v1.CreateFormatResponse
 */
export class CreateFormatResponse extends Message<CreateFormatResponse> {
  /**
   * @generated from field: movies.v1.Format format = 1;
   */
  format?: Format;

  constructor(data?: PartialMessage<CreateFormatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.CreateFormatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "format", kind: "message", T: Format },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFormatResponse {
    return new CreateFormatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFormatResponse {
    return new CreateFormatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFormatResponse {
    return new CreateFormatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFormatResponse | PlainMessage<CreateFormatResponse> | undefined, b: CreateFormatResponse | PlainMessage<CreateFormatResponse> | undefined): boolean {
    return proto3.util.equals(CreateFormatResponse, a, b);
  }
}

/**
 * @generated from message movies.v1.UpdateFormatRequest
 */
export class UpdateFormatRequest extends Message<UpdateFormatRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: optional string display_name = 2;
   */
  displayName?: string;

  /**
   * @generated from field: optional string about = 3;
   */
  about?: string;

  constructor(data?: PartialMessage<UpdateFormatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.UpdateFormatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "about", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateFormatRequest {
    return new UpdateFormatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateFormatRequest {
    return new UpdateFormatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateFormatRequest {
    return new UpdateFormatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateFormatRequest | PlainMessage<UpdateFormatRequest> | undefined, b: UpdateFormatRequest | PlainMessage<UpdateFormatRequest> | undefined): boolean {
    return proto3.util.equals(UpdateFormatRequest, a, b);
  }
}

/**
 * @generated from message movies.v1.UpdateFormatResponse
 */
export class UpdateFormatResponse extends Message<UpdateFormatResponse> {
  /**
   * @generated from field: movies.v1.Format format = 1;
   */
  format?: Format;

  constructor(data?: PartialMessage<UpdateFormatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.UpdateFormatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "format", kind: "message", T: Format },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateFormatResponse {
    return new UpdateFormatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateFormatResponse {
    return new UpdateFormatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateFormatResponse {
    return new UpdateFormatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateFormatResponse | PlainMessage<UpdateFormatResponse> | undefined, b: UpdateFormatResponse | PlainMessage<UpdateFormatResponse> | undefined): boolean {
    return proto3.util.equals(UpdateFormatResponse, a, b);
  }
}

/**
 * @generated from message movies.v1.DeleteFormatRequest
 */
export class DeleteFormatRequest extends Message<DeleteFormatRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteFormatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.DeleteFormatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFormatRequest {
    return new DeleteFormatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFormatRequest {
    return new DeleteFormatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFormatRequest {
    return new DeleteFormatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFormatRequest | PlainMessage<DeleteFormatRequest> | undefined, b: DeleteFormatRequest | PlainMessage<DeleteFormatRequest> | undefined): boolean {
    return proto3.util.equals(DeleteFormatRequest, a, b);
  }
}

/**
 * @generated from message movies.v1.DeleteFormatResponse
 */
export class DeleteFormatResponse extends Message<DeleteFormatResponse> {
  constructor(data?: PartialMessage<DeleteFormatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "movies.v1.DeleteFormatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFormatResponse {
    return new DeleteFormatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFormatResponse {
    return new DeleteFormatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFormatResponse {
    return new DeleteFormatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFormatResponse | PlainMessage<DeleteFormatResponse> | undefined, b: DeleteFormatResponse | PlainMessage<DeleteFormatResponse> | undefined): boolean {
    return proto3.util.equals(DeleteFormatResponse, a, b);
  }
}

