// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file users/v1/users.proto (package users.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum users.v1.Role
 */
export enum Role {
  /**
   * @generated from enum value: ROLE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ROLE_REGULAR_USER = 1;
   */
  REGULAR_USER = 1,

  /**
   * @generated from enum value: ROLE_ADMIN = 2;
   */
  ADMIN = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Role)
proto3.util.setEnumType(Role, "users.v1.Role", [
  { no: 0, name: "ROLE_UNSPECIFIED" },
  { no: 1, name: "ROLE_REGULAR_USER" },
  { no: 2, name: "ROLE_ADMIN" },
]);

/**
 * @generated from message users.v1.GetLoggedInUserRequest
 */
export class GetLoggedInUserRequest extends Message<GetLoggedInUserRequest> {
  constructor(data?: PartialMessage<GetLoggedInUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "users.v1.GetLoggedInUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLoggedInUserRequest {
    return new GetLoggedInUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLoggedInUserRequest {
    return new GetLoggedInUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLoggedInUserRequest {
    return new GetLoggedInUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLoggedInUserRequest | PlainMessage<GetLoggedInUserRequest> | undefined, b: GetLoggedInUserRequest | PlainMessage<GetLoggedInUserRequest> | undefined): boolean {
    return proto3.util.equals(GetLoggedInUserRequest, a, b);
  }
}

/**
 * @generated from message users.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: users.v1.Role role = 4;
   */
  role = Role.UNSPECIFIED;

  /**
   * @generated from field: optional google.protobuf.Timestamp dob = 5;
   */
  dob?: Timestamp;

  /**
   * @generated from field: int32 version = 6;
   */
  version = 0;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "users.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role", kind: "enum", T: proto3.getEnumType(Role) },
    { no: 5, name: "dob", kind: "message", T: Timestamp, opt: true },
    { no: 6, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message users.v1.GetLoggedInUserResponse
 */
export class GetLoggedInUserResponse extends Message<GetLoggedInUserResponse> {
  /**
   * @generated from field: users.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<GetLoggedInUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "users.v1.GetLoggedInUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLoggedInUserResponse {
    return new GetLoggedInUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLoggedInUserResponse {
    return new GetLoggedInUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLoggedInUserResponse {
    return new GetLoggedInUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLoggedInUserResponse | PlainMessage<GetLoggedInUserResponse> | undefined, b: GetLoggedInUserResponse | PlainMessage<GetLoggedInUserResponse> | undefined): boolean {
    return proto3.util.equals(GetLoggedInUserResponse, a, b);
  }
}

/**
 * @generated from message users.v1.UpdateUserRequest
 */
export class UpdateUserRequest extends Message<UpdateUserRequest> {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: optional google.protobuf.Timestamp dob = 2;
   */
  dob?: Timestamp;

  constructor(data?: PartialMessage<UpdateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "users.v1.UpdateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "dob", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined, b: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUserRequest, a, b);
  }
}

/**
 * @generated from message users.v1.UpdateUserResponse
 */
export class UpdateUserResponse extends Message<UpdateUserResponse> {
  /**
   * @generated from field: users.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UpdateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "users.v1.UpdateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserResponse | PlainMessage<UpdateUserResponse> | undefined, b: UpdateUserResponse | PlainMessage<UpdateUserResponse> | undefined): boolean {
    return proto3.util.equals(UpdateUserResponse, a, b);
  }
}

/**
 * @generated from message users.v1.RequestRoleChangeRequest
 */
export class RequestRoleChangeRequest extends Message<RequestRoleChangeRequest> {
  /**
   * @generated from field: users.v1.Role new_role = 1;
   */
  newRole = Role.UNSPECIFIED;

  constructor(data?: PartialMessage<RequestRoleChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "users.v1.RequestRoleChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_role", kind: "enum", T: proto3.getEnumType(Role) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestRoleChangeRequest {
    return new RequestRoleChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestRoleChangeRequest {
    return new RequestRoleChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestRoleChangeRequest {
    return new RequestRoleChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RequestRoleChangeRequest | PlainMessage<RequestRoleChangeRequest> | undefined, b: RequestRoleChangeRequest | PlainMessage<RequestRoleChangeRequest> | undefined): boolean {
    return proto3.util.equals(RequestRoleChangeRequest, a, b);
  }
}

/**
 * @generated from message users.v1.RequestRoleChangeResponse
 */
export class RequestRoleChangeResponse extends Message<RequestRoleChangeResponse> {
  constructor(data?: PartialMessage<RequestRoleChangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "users.v1.RequestRoleChangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestRoleChangeResponse {
    return new RequestRoleChangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestRoleChangeResponse {
    return new RequestRoleChangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestRoleChangeResponse {
    return new RequestRoleChangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RequestRoleChangeResponse | PlainMessage<RequestRoleChangeResponse> | undefined, b: RequestRoleChangeResponse | PlainMessage<RequestRoleChangeResponse> | undefined): boolean {
    return proto3.util.equals(RequestRoleChangeResponse, a, b);
  }
}

